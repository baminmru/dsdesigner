#ifndef _Store_s_hh
#define _Store_s_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "Store_c.hh"


#include "vpre.h"

class  _sk_ObjDefStorage : public  ObjDefStorage {
protected:

  _sk_ObjDefStorage(const char *_obj_name = (const char *)NULL);
  _sk_ObjDefStorage(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_ObjDefStorage() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual Octets* GetTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource
      ) = 0;
  virtual void SetComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName,
      const Octets& Data
      ) = 0;
  virtual Octets* GetObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName
      ) = 0;
  virtual void SetTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName,
      const Octets& Data
      ) = 0;
  virtual void SetBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName,
      CORBA::Boolean AllowAccess
      ) = 0;
  virtual Octets* GetTargetList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void DelTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName
      ) = 0;
  virtual void DisConnect(
      CORBA::Long ConnectId
      ) = 0;
  virtual Octets* GetComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName
      ) = 0;
  virtual Octets* GetBuildList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void AddSystem(
      CORBA::Long ConnectId,
      const char* SystemName
      ) = 0;
  virtual void SetObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName,
      const Octets& Locals
      ) = 0;
  virtual void AddTarget(
      CORBA::Long ConnectId,
      const char* TargetName
      ) = 0;
  virtual void DelObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) = 0;
  virtual void AddDataSource(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* SourceName
      ) = 0;
  virtual Octets* GetPlatformList(
      CORBA::Long ConnectId
      ) = 0;
  virtual Octets* GetDataSourceList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) = 0;
  virtual CORBA::Long Connect(
      const char* UID,
      const char* PWD,
      const char* PlatformName
      ) = 0;
  virtual void SetTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource,
      const char* TargetName,
      const Octets& Specifics
      ) = 0;
  virtual Octets* GetUser(
      CORBA::Long ConnectId,
      const char* UserName
      ) = 0;
  virtual Octets* GetSystemList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void SetObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName,
      const Octets& Specifics
      ) = 0;
  virtual Octets* GetTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName
      ) = 0;
  virtual Octets* GetObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) = 0;
  virtual void DelObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName
      ) = 0;
  virtual void DelBuild(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName
      ) = 0;
  virtual void AddBuild(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName
      ) = 0;
  virtual void SetObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName,
      CORBA::Boolean Exec,
      CORBA::Boolean Read,
      CORBA::Boolean Write
      ) = 0;
  virtual void DelObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) = 0;
  virtual CORBA::Boolean GetBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName
      ) = 0;
  virtual void AddPlatform(
      CORBA::Long ConnectId,
      const char* PlatformName
      ) = 0;
  virtual Octets* GetUserList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void DelSystem(
      CORBA::Long ConnectId,
      const char* SystemName
      ) = 0;
  virtual void DelTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource
      ) = 0;
  virtual void DelTarget(
      CORBA::Long ConnectId,
      const char* TargetName
      ) = 0;
  virtual Octets* GetObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName
      ) = 0;
  virtual void DelUser(
      CORBA::Long ConnectId,
      const char* UserName
      ) = 0;
  virtual void DelObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName
      ) = 0;
  virtual void ChangePassword(
      CORBA::Long ConnectId,
      const char* Password
      ) = 0;
  virtual void SetUser(
      CORBA::Long ConnectId,
      const char* UserName,
      const char* Password,
      CORBA::Boolean IsAdmin
      ) = 0;
  virtual void DelDataSource(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* SourceName
      ) = 0;
  virtual Octets* GetSystemBuildList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) = 0;
  virtual void DelPlatform(
      CORBA::Long ConnectId,
      const char* PlatformName
      ) = 0;
  virtual void DelBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName
      ) = 0;
  virtual void SetObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* ComponentName,
      const Octets& ObjData
      ) = 0;
  virtual Octets* GetComponentList(
      CORBA::Long ConnectId,
      const char* Platform
      ) = 0;
  virtual Octets* GetObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) = 0;
  virtual void DelComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName
      ) = 0;
  virtual Octets* GetSystemObjectsList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) = 0;
  
  // Skeleton Operations implemented automatically

  static void _GetTargetPackSetup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetComponent(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObjectPlatformSpecifics(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetTargetPack(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetBuildRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTargetList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelTargetPack(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DisConnect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetComponent(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBuildList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetObjectLocals(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddTarget(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelObjectLocals(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddDataSource(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetPlatformList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetDataSourceList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Connect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetTargetPackSetup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetSystemList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetObjectPlatformSpecifics(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTargetPack(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObjectLocals(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelObjectPlatformSpecifics(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetObjectRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelObjectRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBuildRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddPlatform(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetUserList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelTargetPackSetup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelTarget(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _ChangePassword(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelDataSource(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetSystemBuildList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelPlatform(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelBuildRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetComponentList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObjectRights(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelComponent(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetSystemObjectsList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_ObjDefStorage : public ObjDefStorage {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_ObjDefStorage(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_ObjDefStorage(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_ObjDefStorage() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  Octets* GetTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource
      ) {
    return _ref.GetTargetPackSetup(
        ConnectId,
        BuildName,
        SystemName,
        DataSource
        );
  }

  void SetComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName,
      const Octets& Data
      ) {
    _ref.SetComponent(
        ConnectId,
        Platform,
        ComponentName,
        Data
        );
  }

  Octets* GetObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName
      ) {
    return _ref.GetObjectPlatformSpecifics(
        ConnectId,
        SystemName,
        ObjectName,
        PlatformName
        );
  }

  void SetTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName,
      const Octets& Data
      ) {
    _ref.SetTargetPack(
        ConnectId,
        Target,
        PackName,
        PlatformName,
        Data
        );
  }

  void SetBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName,
      CORBA::Boolean AllowAccess
      ) {
    _ref.SetBuildRights(
        ConnectId,
        SystemName,
        BuildName,
        UserName,
        AllowAccess
        );
  }

  Octets* GetTargetList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetTargetList(
        ConnectId
        );
  }

  void DelTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName
      ) {
    _ref.DelTargetPack(
        ConnectId,
        Target,
        PackName,
        PlatformName
        );
  }

  void DisConnect(
      CORBA::Long ConnectId
      ) {
    _ref.DisConnect(
        ConnectId
        );
  }

  Octets* GetComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName
      ) {
    return _ref.GetComponent(
        ConnectId,
        Platform,
        ComponentName
        );
  }

  Octets* GetBuildList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetBuildList(
        ConnectId
        );
  }

  void AddSystem(
      CORBA::Long ConnectId,
      const char* SystemName
      ) {
    _ref.AddSystem(
        ConnectId,
        SystemName
        );
  }

  void SetObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName,
      const Octets& Locals
      ) {
    _ref.SetObjectLocals(
        ConnectId,
        SystemName,
        ObjectName,
        UserName,
        Locals
        );
  }

  void AddTarget(
      CORBA::Long ConnectId,
      const char* TargetName
      ) {
    _ref.AddTarget(
        ConnectId,
        TargetName
        );
  }

  void DelObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) {
    _ref.DelObjectLocals(
        ConnectId,
        SystemName,
        ObjectName,
        UserName
        );
  }

  void AddDataSource(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* SourceName
      ) {
    _ref.AddDataSource(
        ConnectId,
        SystemName,
        SourceName
        );
  }

  Octets* GetPlatformList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetPlatformList(
        ConnectId
        );
  }

  Octets* GetDataSourceList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) {
    return _ref.GetDataSourceList(
        ConnectId,
        SystemName
        );
  }

  CORBA::Long Connect(
      const char* UID,
      const char* PWD,
      const char* PlatformName
      ) {
    return _ref.Connect(
        UID,
        PWD,
        PlatformName
        );
  }

  void SetTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource,
      const char* TargetName,
      const Octets& Specifics
      ) {
    _ref.SetTargetPackSetup(
        ConnectId,
        BuildName,
        SystemName,
        DataSource,
        TargetName,
        Specifics
        );
  }

  Octets* GetUser(
      CORBA::Long ConnectId,
      const char* UserName
      ) {
    return _ref.GetUser(
        ConnectId,
        UserName
        );
  }

  Octets* GetSystemList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetSystemList(
        ConnectId
        );
  }

  void SetObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName,
      const Octets& Specifics
      ) {
    _ref.SetObjectPlatformSpecifics(
        ConnectId,
        SystemName,
        ObjectName,
        PlatformName,
        Specifics
        );
  }

  Octets* GetTargetPack(
      CORBA::Long ConnectId,
      const char* Target,
      const char* PackName,
      const char* PlatformName
      ) {
    return _ref.GetTargetPack(
        ConnectId,
        Target,
        PackName,
        PlatformName
        );
  }

  Octets* GetObjectLocals(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) {
    return _ref.GetObjectLocals(
        ConnectId,
        SystemName,
        ObjectName,
        UserName
        );
  }

  void DelObjectPlatformSpecifics(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* PlatformName
      ) {
    _ref.DelObjectPlatformSpecifics(
        ConnectId,
        SystemName,
        ObjectName,
        PlatformName
        );
  }

  void DelBuild(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName
      ) {
    _ref.DelBuild(
        ConnectId,
        BuildName,
        SystemName
        );
  }

  void AddBuild(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName
      ) {
    _ref.AddBuild(
        ConnectId,
        BuildName,
        SystemName
        );
  }

  void SetObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName,
      CORBA::Boolean Exec,
      CORBA::Boolean Read,
      CORBA::Boolean Write
      ) {
    _ref.SetObjectRights(
        ConnectId,
        SystemName,
        ObjectName,
        UserName,
        Exec,
        Read,
        Write
        );
  }

  void DelObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) {
    _ref.DelObjectRights(
        ConnectId,
        SystemName,
        ObjectName,
        UserName
        );
  }

  CORBA::Boolean GetBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName
      ) {
    return _ref.GetBuildRights(
        ConnectId,
        SystemName,
        BuildName,
        UserName
        );
  }

  void AddPlatform(
      CORBA::Long ConnectId,
      const char* PlatformName
      ) {
    _ref.AddPlatform(
        ConnectId,
        PlatformName
        );
  }

  Octets* GetUserList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetUserList(
        ConnectId
        );
  }

  void DelSystem(
      CORBA::Long ConnectId,
      const char* SystemName
      ) {
    _ref.DelSystem(
        ConnectId,
        SystemName
        );
  }

  void DelTargetPackSetup(
      CORBA::Long ConnectId,
      const char* BuildName,
      const char* SystemName,
      const char* DataSource
      ) {
    _ref.DelTargetPackSetup(
        ConnectId,
        BuildName,
        SystemName,
        DataSource
        );
  }

  void DelTarget(
      CORBA::Long ConnectId,
      const char* TargetName
      ) {
    _ref.DelTarget(
        ConnectId,
        TargetName
        );
  }

  Octets* GetObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName
      ) {
    return _ref.GetObject(
        ConnectId,
        SystemName,
        ObjectName
        );
  }

  void DelUser(
      CORBA::Long ConnectId,
      const char* UserName
      ) {
    _ref.DelUser(
        ConnectId,
        UserName
        );
  }

  void DelObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName
      ) {
    _ref.DelObject(
        ConnectId,
        SystemName,
        ObjectName
        );
  }

  void ChangePassword(
      CORBA::Long ConnectId,
      const char* Password
      ) {
    _ref.ChangePassword(
        ConnectId,
        Password
        );
  }

  void SetUser(
      CORBA::Long ConnectId,
      const char* UserName,
      const char* Password,
      CORBA::Boolean IsAdmin
      ) {
    _ref.SetUser(
        ConnectId,
        UserName,
        Password,
        IsAdmin
        );
  }

  void DelDataSource(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* SourceName
      ) {
    _ref.DelDataSource(
        ConnectId,
        SystemName,
        SourceName
        );
  }

  Octets* GetSystemBuildList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) {
    return _ref.GetSystemBuildList(
        ConnectId,
        SystemName
        );
  }

  void DelPlatform(
      CORBA::Long ConnectId,
      const char* PlatformName
      ) {
    _ref.DelPlatform(
        ConnectId,
        PlatformName
        );
  }

  void DelBuildRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* BuildName,
      const char* UserName
      ) {
    _ref.DelBuildRights(
        ConnectId,
        SystemName,
        BuildName,
        UserName
        );
  }

  void SetObject(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* ComponentName,
      const Octets& ObjData
      ) {
    _ref.SetObject(
        ConnectId,
        SystemName,
        ObjectName,
        ComponentName,
        ObjData
        );
  }

  Octets* GetComponentList(
      CORBA::Long ConnectId,
      const char* Platform
      ) {
    return _ref.GetComponentList(
        ConnectId,
        Platform
        );
  }

  Octets* GetObjectRights(
      CORBA::Long ConnectId,
      const char* SystemName,
      const char* ObjectName,
      const char* UserName
      ) {
    return _ref.GetObjectRights(
        ConnectId,
        SystemName,
        ObjectName,
        UserName
        );
  }

  void DelComponent(
      CORBA::Long ConnectId,
      const char* Platform,
      const char* ComponentName
      ) {
    _ref.DelComponent(
        ConnectId,
        Platform,
        ComponentName
        );
  }

  Octets* GetSystemObjectsList(
      CORBA::Long ConnectId,
      const char* SystemName
      ) {
    return _ref.GetSystemObjectsList(
        ConnectId,
        SystemName
        );
  }

};


#include "vpost.h"

#endif

