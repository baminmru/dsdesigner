#ifndef _cartrige_s_hh
#define _cartrige_s_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "cartrige_c.hh"


#include "vpre.h"

class  _sk_Cartrige : public  Cartrige {
protected:

  _sk_Cartrige(const char *_obj_name = (const char *)NULL);
  _sk_Cartrige(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_Cartrige() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual void DisConnect(
      CORBA::Long Instance
      ) = 0;
  virtual CORBA::Long OpenCursor(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) = 0;
  virtual void CloseInstance(
      CORBA::Long Instance
      ) = 0;
  virtual CORBA::Boolean IsConnected(
      CORBA::Long Instance
      ) = 0;
  virtual Octets* GetRowSet(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) = 0;
  virtual void Connect(
      CORBA::Long Instance,
      const Octets& Info
      ) = 0;
  virtual Octets* GetConnectInfo() = 0;
  virtual CORBA::Long NewInstance() = 0;
  virtual Octets* GetCursorRow(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) = 0;
  virtual CORBA::Boolean NoMoreRows(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) = 0;
  virtual void CloseCursor(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) = 0;
  virtual Octets* GetCursorHeared(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) = 0;
  virtual void Exec(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) = 0;
  
  // Skeleton Operations implemented automatically

  static void _DisConnect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _OpenCursor(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _CloseInstance(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _IsConnected(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetRowSet(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Connect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetConnectInfo(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _NewInstance(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetCursorRow(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _NoMoreRows(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _CloseCursor(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetCursorHeared(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Exec(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_Cartrige : public Cartrige {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_Cartrige(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_Cartrige(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_Cartrige() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  void DisConnect(
      CORBA::Long Instance
      ) {
    _ref.DisConnect(
        Instance
        );
  }

  CORBA::Long OpenCursor(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) {
    return _ref.OpenCursor(
        Instance,
        Query,
        Parameters
        );
  }

  void CloseInstance(
      CORBA::Long Instance
      ) {
    _ref.CloseInstance(
        Instance
        );
  }

  CORBA::Boolean IsConnected(
      CORBA::Long Instance
      ) {
    return _ref.IsConnected(
        Instance
        );
  }

  Octets* GetRowSet(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) {
    return _ref.GetRowSet(
        Instance,
        Query,
        Parameters
        );
  }

  void Connect(
      CORBA::Long Instance,
      const Octets& Info
      ) {
    _ref.Connect(
        Instance,
        Info
        );
  }

  Octets* GetConnectInfo(
      ) {
    return _ref.GetConnectInfo(
        );
  }

  CORBA::Long NewInstance(
      ) {
    return _ref.NewInstance(
        );
  }

  Octets* GetCursorRow(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) {
    return _ref.GetCursorRow(
        Instance,
        Cursor
        );
  }

  CORBA::Boolean NoMoreRows(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) {
    return _ref.NoMoreRows(
        Instance,
        Cursor
        );
  }

  void CloseCursor(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) {
    _ref.CloseCursor(
        Instance,
        Cursor
        );
  }

  Octets* GetCursorHeared(
      CORBA::Long Instance,
      CORBA::Long Cursor
      ) {
    return _ref.GetCursorHeared(
        Instance,
        Cursor
        );
  }

  void Exec(
      CORBA::Long Instance,
      const char* Query,
      const Octets& Parameters
      ) {
    _ref.Exec(
        Instance,
        Query,
        Parameters
        );
  }

};


#include "vpost.h"

#endif

