
/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include <corbapch.h>
#pragma hdrstop
#include "ProcessEngine_s.hh"

static CORBA::MethodDescription __sk_ProcessEngine_methods[] = {
  {"AddDocument", &_sk_ProcessEngine::_AddDocument},
  {"GetVersioning", &_sk_ProcessEngine::_GetVersioning},
  {"AddBaseline", &_sk_ProcessEngine::_AddBaseline},
  {"ChangePassword", &_sk_ProcessEngine::_ChangePassword},
  {"SetType", &_sk_ProcessEngine::_SetType},
  {"SetWorksetItem", &_sk_ProcessEngine::_SetWorksetItem},
  {"GetUserList", &_sk_ProcessEngine::_GetUserList},
  {"DeleteVersion", &_sk_ProcessEngine::_DeleteVersion},
  {"DisConnect", &_sk_ProcessEngine::_DisConnect},
  {"NewInstance", &_sk_ProcessEngine::_NewInstance},
  {"DelUserRole", &_sk_ProcessEngine::_DelUserRole},
  {"GetDocumentList", &_sk_ProcessEngine::_GetDocumentList},
  {"GetUserWorksetList", &_sk_ProcessEngine::_GetUserWorksetList},
  {"LockDocument", &_sk_ProcessEngine::_LockDocument},
  {"GetVersionList", &_sk_ProcessEngine::_GetVersionList},
  {"GetPackageList", &_sk_ProcessEngine::_GetPackageList},
  {"DelCycle", &_sk_ProcessEngine::_DelCycle},
  {"DelBaseline", &_sk_ProcessEngine::_DelBaseline},
  {"SetVersionState", &_sk_ProcessEngine::_SetVersionState},
  {"Connect", &_sk_ProcessEngine::_Connect},
  {"GetStateList", &_sk_ProcessEngine::_GetStateList},
  {"GetTypeList", &_sk_ProcessEngine::_GetTypeList},
  {"UnLockDocument", &_sk_ProcessEngine::_UnLockDocument},
  {"AddState", &_sk_ProcessEngine::_AddState},
  {"AddPackage", &_sk_ProcessEngine::_AddPackage},
  {"GetProductPackageList", &_sk_ProcessEngine::_GetProductPackageList},
  {"GetProductBaselineList", &_sk_ProcessEngine::_GetProductBaselineList},
  {"AddVersionDep", &_sk_ProcessEngine::_AddVersionDep},
  {"DelBaselineDep", &_sk_ProcessEngine::_DelBaselineDep},
  {"UnLockVersion", &_sk_ProcessEngine::_UnLockVersion},
  {"GetPackageItemList", &_sk_ProcessEngine::_GetPackageItemList},
  {"GetTypeStore", &_sk_ProcessEngine::_GetTypeStore},
  {"DelUser", &_sk_ProcessEngine::_DelUser},
  {"SetPackageItem", &_sk_ProcessEngine::_SetPackageItem},
  {"GetPackageDepList", &_sk_ProcessEngine::_GetPackageDepList},
  {"IsUpdatedVersion", &_sk_ProcessEngine::_IsUpdatedVersion},
  {"AddPackageDep", &_sk_ProcessEngine::_AddPackageDep},
  {"GetProductList", &_sk_ProcessEngine::_GetProductList},
  {"SetNewVersion", &_sk_ProcessEngine::_SetNewVersion},
  {"AddRole", &_sk_ProcessEngine::_AddRole},
  {"DelPackage", &_sk_ProcessEngine::_DelPackage},
  {"GetCycleList", &_sk_ProcessEngine::_GetCycleList},
  {"DelType", &_sk_ProcessEngine::_DelType},
  {"GetBaselineList", &_sk_ProcessEngine::_GetBaselineList},
  {"GetRoleList", &_sk_ProcessEngine::_GetRoleList},
  {"GetWorksetItemList", &_sk_ProcessEngine::_GetWorksetItemList},
  {"CloseInstance", &_sk_ProcessEngine::_CloseInstance},
  {"AddProduct", &_sk_ProcessEngine::_AddProduct},
  {"GetBaselineItemList", &_sk_ProcessEngine::_GetBaselineItemList},
  {"SetBaselineItem", &_sk_ProcessEngine::_SetBaselineItem},
  {"SetUserRole", &_sk_ProcessEngine::_SetUserRole},
  {"GetDocumentIndex", &_sk_ProcessEngine::_GetDocumentIndex},
  {"AddWorkset", &_sk_ProcessEngine::_AddWorkset},
  {"LockVersion", &_sk_ProcessEngine::_LockVersion},
  {"GetRoleUserList", &_sk_ProcessEngine::_GetRoleUserList},
  {"DelState", &_sk_ProcessEngine::_DelState},
  {"DelBaselineItem", &_sk_ProcessEngine::_DelBaselineItem},
  {"AddCycle", &_sk_ProcessEngine::_AddCycle},
  {"GetVersionDepList", &_sk_ProcessEngine::_GetVersionDepList},
  {"DelWorksetItem", &_sk_ProcessEngine::_DelWorksetItem},
  {"AddSoftware", &_sk_ProcessEngine::_AddSoftware},
  {"GetVersion", &_sk_ProcessEngine::_GetVersion},
  {"DelRole", &_sk_ProcessEngine::_DelRole},
  {"IsConnected", &_sk_ProcessEngine::_IsConnected},
  {"GetWorksetList", &_sk_ProcessEngine::_GetWorksetList},
  {"DelPackageDep", &_sk_ProcessEngine::_DelPackageDep},
  {"DelVersionDep", &_sk_ProcessEngine::_DelVersionDep},
  {"GetBaselineDepList", &_sk_ProcessEngine::_GetBaselineDepList},
  {"DelProduct", &_sk_ProcessEngine::_DelProduct},
  {"GetVersionState", &_sk_ProcessEngine::_GetVersionState},
  {"GetPossibleStates", &_sk_ProcessEngine::_GetPossibleStates},
  {"GetSoftwareList", &_sk_ProcessEngine::_GetSoftwareList},
  {"SetUser", &_sk_ProcessEngine::_SetUser},
  {"AddBaselineDep", &_sk_ProcessEngine::_AddBaselineDep},
  {"DelPackageItem", &_sk_ProcessEngine::_DelPackageItem},
  {"DelWorkset", &_sk_ProcessEngine::_DelWorkset},
  {"IsAmin", &_sk_ProcessEngine::_IsAmin},
  {"DelSoftware", &_sk_ProcessEngine::_DelSoftware}
};

const CORBA::TypeInfo _sk_ProcessEngine::_skel_info(
  "ProcessEngine",
  (CORBA::ULong)78,
  __sk_ProcessEngine_methods);

_sk_ProcessEngine::_sk_ProcessEngine(const char *_obj_name) {
  _object_name(_obj_name);
}

_sk_ProcessEngine::_sk_ProcessEngine(
    const char *_serv_name,
    const CORBA::ReferenceData& _id) {
  _service(_serv_name, _id);
}

void _sk_ProcessEngine::___noop() {}
void _sk_ProcessEngine::_AddDocument(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::Long MasterIndex;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Boolean AllowVersions;
  _vistrm >> ConnectId;
  _vistrm >> MasterIndex;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> AllowVersions;
  _impl->AddDocument(
      ConnectId,
      MasterIndex,
      TypeName.in(),
      DocumentName.in(),
      AllowVersions
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetVersioning(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  CORBA::Boolean _ret = _impl->GetVersioning(
      ConnectId,
      TypeName.in(),
      DocumentName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_AddBaseline(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _impl->AddBaseline(
      ConnectId,
      ProductName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_ChangePassword(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Password;
  _vistrm >> ConnectId;
  _vistrm >> Password;
  _impl->ChangePassword(
      ConnectId,
      Password.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_SetType(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var StoreName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> StoreName;
  _impl->SetType(
      ConnectId,
      TypeName.in(),
      StoreName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_SetWorksetItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  CORBA::String_var Name;
  CORBA::String_var TypeName;
  CORBA::String_var DocName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  _vistrm >> Name;
  _vistrm >> TypeName;
  _vistrm >> DocName;
  _vistrm >> Version;
  _impl->SetWorksetItem(
      ConnectId,
      Owner.in(),
      Name.in(),
      TypeName.in(),
      DocName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetUserList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetUserList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DeleteVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _impl->DeleteVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DisConnect(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  _impl->DisConnect(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_NewInstance(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long _ret = _impl->NewInstance(
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelUserRole(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var RoleName;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> RoleName;
  _vistrm >> UID;
  _impl->DelUserRole(
      ConnectId,
      TypeName.in(),
      RoleName.in(),
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetDocumentList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetDocumentList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetUserWorksetList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  Octets_var _ret = _impl->GetUserWorksetList(
      ConnectId,
      Owner.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_LockDocument(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> UID;
  _impl->LockDocument(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetVersionList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  Octets_var _ret = _impl->GetVersionList(
      ConnectId,
      TypeName.in(),
      DocumentName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetPackageList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetPackageList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelCycle(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var FromStateName;
  CORBA::String_var ToStateName;
  CORBA::String_var RoleName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> FromStateName;
  _vistrm >> ToStateName;
  _vistrm >> RoleName;
  _impl->DelCycle(
      ConnectId,
      TypeName.in(),
      FromStateName.in(),
      ToStateName.in(),
      RoleName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelBaseline(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _impl->DelBaseline(
      ConnectId,
      ProductName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_SetVersionState(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  CORBA::String_var StateName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _vistrm >> StateName;
  _impl->SetVersionState(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version,
      StateName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_Connect(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::String_var UID;
  CORBA::String_var PWD;
  _vistrm >> UID;
  _vistrm >> PWD;
  _impl->Connect(
      UID.in(),
      PWD.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetStateList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  Octets_var _ret = _impl->GetStateList(
      ConnectId,
      TypeName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetTypeList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetTypeList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_UnLockDocument(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> UID;
  _impl->UnLockDocument(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddState(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var StateName;
  CORBA::Boolean IsFinal;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> StateName;
  _vistrm >> IsFinal;
  _impl->AddState(
      ConnectId,
      TypeName.in(),
      StateName.in(),
      IsFinal
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddPackage(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _impl->AddPackage(
      ConnectId,
      SoftwareName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetProductPackageList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  Octets_var _ret = _impl->GetProductPackageList(
      ConnectId,
      SoftwareName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetProductBaselineList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  Octets_var _ret = _impl->GetProductBaselineList(
      ConnectId,
      ProductName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_AddVersionDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  CORBA::String_var ProductName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _vistrm >> ProductName;
  _vistrm >> Build;
  _impl->AddVersionDep(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version,
      ProductName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelBaselineDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _impl->DelBaselineDep(
      ConnectId,
      ProductName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_UnLockVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _vistrm >> UID;
  _impl->UnLockVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version,
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetPackageItemList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  Octets_var _ret = _impl->GetPackageItemList(
      ConnectId,
      SoftwareName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetTypeStore(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  CORBA::String_var _ret = _impl->GetTypeStore(
      ConnectId,
      TypeName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelUser(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var UID;
  CORBA::String_var PWD;
  _vistrm >> ConnectId;
  _vistrm >> UID;
  _vistrm >> PWD;
  _impl->DelUser(
      ConnectId,
      UID.in(),
      PWD.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_SetPackageItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  CORBA::String_var ItemName;
  Octets Info;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _vistrm >> ItemName;
  _vistrm >> Info;
  _impl->SetPackageItem(
      ConnectId,
      SoftwareName.in(),
      Build,
      ItemName.in(),
      Info
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetPackageDepList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  Octets_var _ret = _impl->GetPackageDepList(
      ConnectId,
      SoftwareName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_IsUpdatedVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  Octets Info;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Info;
  CORBA::Boolean _ret = _impl->IsUpdatedVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Info
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_AddPackageDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  CORBA::String_var DepOnProductName;
  CORBA::Long DepOnVersion;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _vistrm >> DepOnProductName;
  _vistrm >> DepOnVersion;
  _impl->AddPackageDep(
      ConnectId,
      SoftwareName.in(),
      Build,
      DepOnProductName.in(),
      DepOnVersion
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetProductList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetProductList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_SetNewVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  Octets Info;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Info;
  CORBA::Long _ret = _impl->SetNewVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Info
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_AddRole(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var RoleName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> RoleName;
  _impl->AddRole(
      ConnectId,
      TypeName.in(),
      RoleName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelPackage(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _impl->DelPackage(
      ConnectId,
      SoftwareName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetCycleList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  Octets_var _ret = _impl->GetCycleList(
      ConnectId,
      TypeName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelType(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _impl->DelType(
      ConnectId,
      TypeName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetBaselineList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetBaselineList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetRoleList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  Octets_var _ret = _impl->GetRoleList(
      ConnectId,
      TypeName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetWorksetItemList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  CORBA::String_var Name;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  _vistrm >> Name;
  Octets_var _ret = _impl->GetWorksetItemList(
      ConnectId,
      Owner.in(),
      Name.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_CloseInstance(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  _impl->CloseInstance(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddProduct(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _impl->AddProduct(
      ConnectId,
      ProductName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetBaselineItemList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  Octets_var _ret = _impl->GetBaselineItemList(
      ConnectId,
      ProductName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_SetBaselineItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  CORBA::String_var TypeName;
  CORBA::String_var DocName;
  CORBA::Long DocVersion;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _vistrm >> TypeName;
  _vistrm >> DocName;
  _vistrm >> DocVersion;
  _impl->SetBaselineItem(
      ConnectId,
      ProductName.in(),
      Version,
      TypeName.in(),
      DocName.in(),
      DocVersion
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_SetUserRole(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var RoleName;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> RoleName;
  _vistrm >> UID;
  _impl->SetUserRole(
      ConnectId,
      TypeName.in(),
      RoleName.in(),
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetDocumentIndex(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  CORBA::Long _ret = _impl->GetDocumentIndex(
      ConnectId,
      TypeName.in(),
      DocumentName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_AddWorkset(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  CORBA::String_var Name;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  _vistrm >> Name;
  _impl->AddWorkset(
      ConnectId,
      Owner.in(),
      Name.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_LockVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  CORBA::String_var UID;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _vistrm >> UID;
  _impl->LockVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version,
      UID.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetRoleUserList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var RoleName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> RoleName;
  Octets_var _ret = _impl->GetRoleUserList(
      ConnectId,
      TypeName.in(),
      RoleName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelState(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var StateName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> StateName;
  _impl->DelState(
      ConnectId,
      TypeName.in(),
      StateName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelBaselineItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  CORBA::String_var TypeName;
  CORBA::String_var DocName;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _vistrm >> TypeName;
  _vistrm >> DocName;
  _impl->DelBaselineItem(
      ConnectId,
      ProductName.in(),
      Version,
      TypeName.in(),
      DocName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddCycle(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var FromStateName;
  CORBA::String_var ToStateName;
  CORBA::String_var RoleName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> FromStateName;
  _vistrm >> ToStateName;
  _vistrm >> RoleName;
  _impl->AddCycle(
      ConnectId,
      TypeName.in(),
      FromStateName.in(),
      ToStateName.in(),
      RoleName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetVersionDepList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  Octets_var _ret = _impl->GetVersionDepList(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelWorksetItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  CORBA::String_var Name;
  CORBA::String_var TypeName;
  CORBA::String_var DocName;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  _vistrm >> Name;
  _vistrm >> TypeName;
  _vistrm >> DocName;
  _impl->DelWorksetItem(
      ConnectId,
      Owner.in(),
      Name.in(),
      TypeName.in(),
      DocName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddSoftware(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _impl->AddSoftware(
      ConnectId,
      SoftwareName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetVersion(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  Octets_var _ret = _impl->GetVersion(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelRole(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var RoleName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> RoleName;
  _impl->DelRole(
      ConnectId,
      TypeName.in(),
      RoleName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_IsConnected(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  CORBA::Boolean _ret = _impl->IsConnected(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetWorksetList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetWorksetList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelPackageDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _impl->DelPackageDep(
      ConnectId,
      SoftwareName.in(),
      Build
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelVersionDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  _impl->DelVersionDep(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetBaselineDepList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  Octets_var _ret = _impl->GetBaselineDepList(
      ConnectId,
      ProductName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelProduct(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _impl->DelProduct(
      ConnectId,
      ProductName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_GetVersionState(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  CORBA::Long Version;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  _vistrm >> Version;
  CORBA::String_var _ret = _impl->GetVersionState(
      ConnectId,
      TypeName.in(),
      DocumentName.in(),
      Version
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetPossibleStates(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var TypeName;
  CORBA::String_var DocumentName;
  _vistrm >> ConnectId;
  _vistrm >> TypeName;
  _vistrm >> DocumentName;
  Octets_var _ret = _impl->GetPossibleStates(
      ConnectId,
      TypeName.in(),
      DocumentName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_GetSoftwareList(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  _vistrm >> ConnectId;
  Octets_var _ret = _impl->GetSoftwareList(
      ConnectId
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_SetUser(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var UID;
  CORBA::String_var PWD;
  CORBA::Boolean IsAdmin;
  _vistrm >> ConnectId;
  _vistrm >> UID;
  _vistrm >> PWD;
  _vistrm >> IsAdmin;
  _impl->SetUser(
      ConnectId,
      UID.in(),
      PWD.in(),
      IsAdmin
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_AddBaselineDep(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var ProductName;
  CORBA::Long Version;
  CORBA::String_var DepOnProductName;
  CORBA::Long DepOnVersion;
  _vistrm >> ConnectId;
  _vistrm >> ProductName;
  _vistrm >> Version;
  _vistrm >> DepOnProductName;
  _vistrm >> DepOnVersion;
  _impl->AddBaselineDep(
      ConnectId,
      ProductName.in(),
      Version,
      DepOnProductName.in(),
      DepOnVersion
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelPackageItem(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  CORBA::Long Build;
  CORBA::String_var ItemName;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _vistrm >> Build;
  _vistrm >> ItemName;
  _impl->DelPackageItem(
      ConnectId,
      SoftwareName.in(),
      Build,
      ItemName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_DelWorkset(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var Owner;
  CORBA::String_var Name;
  _vistrm >> ConnectId;
  _vistrm >> Owner;
  _vistrm >> Name;
  _impl->DelWorkset(
      ConnectId,
      Owner.in(),
      Name.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

void _sk_ProcessEngine::_IsAmin(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var UID;
  CORBA::String_var PWD;
  _vistrm >> ConnectId;
  _vistrm >> UID;
  _vistrm >> PWD;
  CORBA::Boolean _ret = _impl->IsAmin(
      ConnectId,
      UID.in(),
      PWD.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
  _ostrm << _ret;
}

void _sk_ProcessEngine::_DelSoftware(
    void *_obj,
    CORBA::MarshalInBuffer &_istrm,
    CORBA::Principal_ptr _principal,
    const char *_oper,
    void *_priv_data) {
  VISistream& _vistrm = _istrm;
  ProcessEngine *_impl = (ProcessEngine *)_obj;

  CORBA::Long ConnectId;
  CORBA::String_var SoftwareName;
  _vistrm >> ConnectId;
  _vistrm >> SoftwareName;
  _impl->DelSoftware(
      ConnectId,
      SoftwareName.in()
      );
  
  VISostream& _ostrm = *(VISostream *)
    (CORBA::MarshalOutBuffer*)_impl->_prepare_reply(_priv_data);
}

