
/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include <corbapch.h>
#pragma hdrstop
#include "ProcessEngine_c.hh"


#if defined(MSVCNEWDLL_BUG)
void *Octets::operator new(size_t ts) {
  return ::operator new(ts);
}

void Octets::operator delete(void *p) {
  ::operator delete(p);
}


#endif

CORBA::Octet* Octets::allocbuf(CORBA::ULong _nelems) {
  return new CORBA::Octet[_nelems];
}

void Octets::freebuf(CORBA::Octet *_data) {
  if (_data) delete[] _data;
}

Octets::Octets(CORBA::ULong _max) {
  _num_allocated = _max;
  _count = 0;
  if (_num_allocated > 0)
    _contents = allocbuf(_num_allocated);
  else
    _contents = (CORBA::Octet *)NULL;
  _release_flag = 1;
  _ref_count = 1;
}

Octets::Octets(
    CORBA::ULong _max,
    CORBA::ULong _len,
    CORBA::Octet *_data,
    CORBA::Boolean _release) {
  _num_allocated = _max;
  _count = _len;
  _contents = _data;
  _release_flag = _release;
  _ref_count = 1;
}

Octets::Octets(const Octets& _seq) {
  _num_allocated = _seq._num_allocated;
  _count = _seq._count;
  if (_num_allocated > 0) {
    _contents = allocbuf(_num_allocated);
    memcpy(_contents, _seq._contents, (size_t(_count) * sizeof(CORBA::Octet)));
  }
  else
    _contents = (CORBA::Octet *)NULL;
  _release_flag = 1;
  _ref_count = 1;
}

Octets::~Octets() {
  if (_release_flag) freebuf(_contents);
}

Octets& Octets::operator=(const Octets& _seq) {
  if (_count < _seq._count) {
    if (_num_allocated < _seq._count) {
      if (_release_flag)
        freebuf(_contents);
      else
        _release_flag = 1;
      _contents = allocbuf(_seq._num_allocated);
      _num_allocated = _seq._num_allocated;
    }
  }
  _count = _seq._count;
  memcpy(_contents, _seq._contents, (size_t(_count) * sizeof(CORBA::Octet)));
  return *this;
}

void Octets::length(CORBA::ULong _newlen) {
  if (_newlen > _num_allocated) {
    CORBA::Octet *temp = allocbuf(_newlen);
    memcpy(temp, _contents, (size_t(_count) * sizeof(CORBA::Octet)));
    if (_release_flag)
      freebuf(_contents);
    else
      _release_flag = 1;
    _num_allocated = _newlen;
    _contents = temp;
  }
  if (_newlen > _count)
    memset(&_contents[_count], 0, size_t(_newlen - _count) *
        sizeof(CORBA::Octet));
  _count = _newlen;
}

CORBA::Octet& Octets::operator[](CORBA::ULong _index) {
  if (_index >= _count)
    throw CORBA::BAD_PARAM();
  return _contents[_index];
}

const CORBA::Octet& Octets::operator[](CORBA::ULong _index) const {
  if (_index >= _count)
    throw CORBA::BAD_PARAM();
  return _contents[_index];
}

VISostream&  operator<<(VISostream& _strm, const Octets& _seq) {
  _strm << _seq._count;
  if (_seq._count > 0)
    _strm.put(_seq._contents, (unsigned int)_seq._count);
  return _strm;
}

VISistream& operator>>(VISistream& _strm,  Octets& _seq) {
  CORBA::ULong t_count;
  _strm >> t_count;
  if (t_count > 0 && ! _strm.is_available(t_count)) {
    throw CORBA::MARSHAL();
  }
  if (t_count > _seq._count) {
    if (_seq._num_allocated < t_count) {
      if (_seq._release_flag)
        Octets::freebuf(_seq._contents);
      else
        _seq._release_flag = 1;
      _seq._contents = Octets::allocbuf(t_count);
      _seq._num_allocated = t_count;
    }
  }
  _seq._count = t_count;
  if (_seq._count > 0)
    _strm.get(_seq._contents, (unsigned int)_seq._count);
  return _strm;
}

Ostream& operator<<(Ostream& _strm, const Octets& _seq) {
  VISostream _ostrm(_strm);
  _ostrm << _seq;
  return _strm;
}


Octets_ptr & Octets_var::out() {
  Octets::_release(_ptr);
  _ptr = (Octets *)NULL;
  return _ptr;
}

ProcessEngine_ptr ProcessEngine_var:: _duplicate(ProcessEngine_ptr _p) { return ProcessEngine::_duplicate(_p); }
void ProcessEngine_var::_release(ProcessEngine_ptr _p) { CORBA::release(_p); }

ProcessEngine_var::ProcessEngine_var() : _ptr(ProcessEngine::_nil()) {}

ProcessEngine_var::ProcessEngine_var(ProcessEngine_ptr _p) : _ptr(_p) {}

ProcessEngine_var::ProcessEngine_var(const ProcessEngine_var& _var) :
   _ptr(ProcessEngine::_duplicate((ProcessEngine_ptr)_var)) {}

ProcessEngine_var::~ProcessEngine_var() { CORBA::release(_ptr); }

ProcessEngine_var& ProcessEngine_var::operator=(ProcessEngine_ptr _p) {
  CORBA::release(_ptr);
  _ptr = _p;
  return *this;
}


ProcessEngine_ptr& ProcessEngine_var::out() {
  CORBA::release(_ptr);
  _ptr = (ProcessEngine_ptr)NULL;
  return _ptr;
}

VISistream& operator>>(VISistream& _strm, ProcessEngine_var& _var) {
  _strm >> _var._ptr;
  return _strm;
}

VISostream& operator<<(VISostream& _strm, const ProcessEngine_var& _var) {
  _strm << _var._ptr;
  return _strm;
}

Istream& operator>>(Istream& _strm, ProcessEngine_var& _var) {
  VISistream _istrm(_strm);
  _istrm >> _var._ptr;
  return _strm;
}

Ostream& operator<<(Ostream& _strm, const ProcessEngine_var& _var) {
  _strm << (CORBA::Object_ptr)_var._ptr;
  return _strm;
}

const CORBA::TypeInfo ProcessEngine::_class_info(
  "ProcessEngine",
  "IDL:ProcessEngine:1.0",
  NULL,
  &ProcessEngine::_factory,
  NULL, 0, 
  NULL, 0,
  CORBA::Object::_desc(),
  0);

VISistream& operator>>(VISistream& _strm, ProcessEngine_ptr& _obj) {
  CORBA::Object_var _var_obj(_obj);
  _var_obj = CORBA::Object::_read(_strm, ProcessEngine::_desc());
  _obj = ProcessEngine::_narrow(_var_obj);
  return _strm;
}

VISostream& operator<<(VISostream& _strm, const ProcessEngine_ptr _obj) {
  _strm << (CORBA_Object_ptr)_obj;
  return _strm;
}


const CORBA::TypeInfo *ProcessEngine::_desc() { return &_class_info; }

const CORBA::TypeInfo *ProcessEngine::_type_info() const { return &_class_info; }

void *ProcessEngine::_safe_narrow(const CORBA::TypeInfo& _info) const {
  if ( _info == _class_info) 
    return (void *)this;
  return CORBA_Object::_safe_narrow(_info);
}

CORBA::Object *ProcessEngine::_factory() {
  return new ProcessEngine;
}

ProcessEngine_ptr ProcessEngine::_this() {
  return ProcessEngine::_duplicate(___root);
}

ProcessEngine_ptr ProcessEngine::_narrow(CORBA::Object *_obj) {
  if ( _obj == CORBA::Object::_nil() )
    return ProcessEngine::_nil();
  else
    return ProcessEngine::_duplicate((ProcessEngine_ptr)_obj->_safe_narrow(_class_info));
}

ProcessEngine *ProcessEngine::_bind(
    const char *_object_name,
    const char *_host_name,
    const CORBA::BindOptions *_opt,
    CORBA::ORB_ptr _orb) {
  CORBA::Object_var _obj= CORBA::Object::_bind_to_object(
      "IDL:ProcessEngine:1.0", _object_name, _host_name, _opt, _orb);
  return ProcessEngine::_narrow(_obj);
}

void ProcessEngine::AddDocument(
    CORBA::Long _ConnectId,
    CORBA::Long _MasterIndex,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Boolean _AllowVersions
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddDocument",
        1,
        104612);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _MasterIndex;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _AllowVersions;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

CORBA::Boolean ProcessEngine::GetVersioning(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName
    ) {

  CORBA::Boolean _ret = (CORBA::Boolean)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetVersioning",
        1,
        421247);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::AddBaseline(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddBaseline",
        1,
        105229);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::ChangePassword(
    CORBA::Long _ConnectId,
    const char* _Password
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "ChangePassword",
        1,
        835732);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Password;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::SetType(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _StoreName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetType",
        1,
        7393);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _StoreName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::SetWorksetItem(
    CORBA::Long _ConnectId,
    const char* _Owner,
    const char* _Name,
    const char* _TypeName,
    const char* _DocName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetWorksetItem",
        1,
        934303);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    _ostrm << _Name;
    _ostrm << _TypeName;
    _ostrm << _DocName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetUserList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetUserList",
        1,
        105622);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DeleteVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DeleteVersion",
        1,
        411660);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DisConnect(
    CORBA::Long _ConnectId
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DisConnect",
        1,
        49430);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

CORBA::Long ProcessEngine::NewInstance(
    ) {

  CORBA::Long _ret = (CORBA::Long)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "NewInstance",
        1,
        110899);
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelUserRole(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _RoleName,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelUserRole",
        1,
        100433);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _RoleName;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetDocumentList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetDocumentList",
        1,
        1648918);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetUserWorksetList(
    CORBA::Long _ConnectId,
    const char* _Owner
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetUserWorksetList",
        1,
        13513206);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::LockDocument(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "LockDocument",
        1,
        213412);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetVersionList(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetVersionList",
        1,
        842646);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetPackageList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetPackageList",
        1,
        840998);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelCycle(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _FromStateName,
    const char* _ToStateName,
    const char* _RoleName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelCycle",
        1,
        12297);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _FromStateName;
    _ostrm << _ToStateName;
    _ostrm << _RoleName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelBaseline(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelBaseline",
        1,
        99597);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::SetVersionState(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version,
    const char* _StateName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetVersionState",
        1,
        1881625);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    _ostrm << _StateName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::Connect(
    const char* _UID,
    const char* _PWD
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "Connect",
        1,
        6550);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _UID;
    _ostrm << _PWD;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetStateList(
    CORBA::Long _ConnectId,
    const char* _TypeName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetStateList",
        1,
        212678);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetTypeList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetTypeList",
        1,
        105798);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::UnLockDocument(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "UnLockDocument",
        1,
        983460);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddState(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _StateName,
    CORBA::Boolean _IsFinal
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddState",
        1,
        12953);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _StateName;
    _ostrm << _IsFinal;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddPackage(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddPackage",
        1,
        51303);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetProductPackageList(
    CORBA::Long _ConnectId,
    const char* _SoftwareName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetProductPackageList",
        1,
        108950822);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetProductBaselineList(
    CORBA::Long _ConnectId,
    const char* _ProductName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetProductBaselineList",
        1,
        217863046);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::AddVersionDep(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version,
    const char* _ProductName,
    CORBA::Long _Build
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddVersionDep",
        1,
        411082);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    _ostrm << _ProductName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelBaselineDep(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelBaselineDep",
        1,
        797122);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::UnLockVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "UnLockVersion",
        1,
        492556);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetPackageItemList(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetPackageItemList",
        1,
        13457318);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

char* ProcessEngine::GetTypeStore(
    CORBA::Long _ConnectId,
    const char* _TypeName
    ) {

  char* _ret = (char*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetTypeStore",
        1,
        211853);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelUser(
    CORBA::Long _ConnectId,
    const char* _UID,
    const char* _PWD
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelUser",
        1,
        6332);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _UID;
    _ostrm << _PWD;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::SetPackageItem(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build,
    const char* _ItemName,
    const Octets& _Info
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetPackageItem",
        1,
        939343);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    _ostrm << _ItemName;
    _ostrm << _Info;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetPackageDepList(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetPackageDepList",
        1,
        6728310);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

CORBA::Boolean ProcessEngine::IsUpdatedVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    const Octets& _Info
    ) {

  CORBA::Boolean _ret = (CORBA::Boolean)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "IsUpdatedVersion",
        1,
        3663756);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Info;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::AddPackageDep(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build,
    const char* _DepOnProductName,
    CORBA::Long _DepOnVersion
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddPackageDep",
        1,
        410258);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    _ostrm << _DepOnProductName;
    _ostrm << _DepOnVersion;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetProductList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetProductList",
        1,
        850998);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

CORBA::Long ProcessEngine::SetNewVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    const Octets& _Info
    ) {

  CORBA::Long _ret = (CORBA::Long)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetNewVersion",
        1,
        464396);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Info;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::AddRole(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _RoleName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddRole",
        1,
        6417);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _RoleName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelPackage(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelPackage",
        1,
        51047);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetCycleList(
    CORBA::Long _ConnectId,
    const char* _TypeName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetCycleList",
        1,
        207814);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelType(
    CORBA::Long _ConnectId,
    const char* _TypeName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelType",
        1,
        6305);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetBaselineList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetBaselineList",
        1,
        1643398);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetRoleList(
    CORBA::Long _ConnectId,
    const char* _TypeName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetRoleList",
        1,
        104518);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetWorksetItemList(
    CORBA::Long _ConnectId,
    const char* _Owner,
    const char* _Name
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetWorksetItemList",
        1,
        13376166);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    _ostrm << _Name;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::CloseInstance(
    CORBA::Long _ConnectId
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "CloseInstance",
        1,
        416563);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddProduct(
    CORBA::Long _ConnectId,
    const char* _ProductName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddProduct",
        1,
        51958);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetBaselineItemList(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetBaselineItemList",
        1,
        26295718);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::SetBaselineItem(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version,
    const char* _TypeName,
    const char* _DocName,
    CORBA::Long _DocVersion
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetBaselineItem",
        1,
        1840111);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    _ostrm << _TypeName;
    _ostrm << _DocName;
    _ostrm << _DocVersion;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::SetUserRole(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _RoleName,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetUserRole",
        1,
        117841);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _RoleName;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

CORBA::Long ProcessEngine::GetDocumentIndex(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName
    ) {

  CORBA::Long _ret = (CORBA::Long)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetDocumentIndex",
        1,
        3297858);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::AddWorkset(
    CORBA::Long _ConnectId,
    const char* _Owner,
    const char* _Name
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddWorkset",
        1,
        51498);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    _ostrm << _Name;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::LockVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version,
    const char* _UID
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "LockVersion",
        1,
        107532);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    _ostrm << _UID;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetRoleUserList(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _RoleName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetRoleUserList",
        1,
        1675158);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _RoleName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelState(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _StateName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelState",
        1,
        12633);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _StateName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelBaselineItem(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version,
    const char* _TypeName,
    const char* _DocName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelBaselineItem",
        1,
        1594351);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    _ostrm << _TypeName;
    _ostrm << _DocName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddCycle(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _FromStateName,
    const char* _ToStateName,
    const char* _RoleName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddCycle",
        1,
        13257);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _FromStateName;
    _ostrm << _ToStateName;
    _ostrm << _RoleName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetVersionDepList(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetVersionDepList",
        1,
        6742006);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelWorksetItem(
    CORBA::Long _ConnectId,
    const char* _Owner,
    const char* _Name,
    const char* _TypeName,
    const char* _DocName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelWorksetItem",
        1,
        811423);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    _ostrm << _Name;
    _ostrm << _TypeName;
    _ostrm << _DocName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddSoftware(
    CORBA::Long _ConnectId,
    const char* _SoftwareName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddSoftware",
        1,
        103293);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetVersion(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetVersion",
        1,
        52620);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelRole(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _RoleName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelRole",
        1,
        6385);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _RoleName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

CORBA::Boolean ProcessEngine::IsConnected(
    CORBA::Long _ConnectId
    ) {

  CORBA::Boolean _ret = (CORBA::Boolean)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "IsConnected",
        1,
        107766);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetWorksetList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetWorksetList",
        1,
        836086);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelPackageDep(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelPackageDep",
        1,
        408210);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelVersionDep(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelVersionDep",
        1,
        409034);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

Octets* ProcessEngine::GetBaselineDepList(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetBaselineDepList",
        1,
        13148022);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelProduct(
    CORBA::Long _ConnectId,
    const char* _ProductName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelProduct",
        1,
        50678);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

char* ProcessEngine::GetVersionState(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName,
    CORBA::Long _Version
    ) {

  char* _ret = (char*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetVersionState",
        1,
        1685017);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    _ostrm << _Version;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetPossibleStates(
    CORBA::Long _ConnectId,
    const char* _TypeName,
    const char* _DocumentName
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetPossibleStates",
        1,
        6730753);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _TypeName;
    _ostrm << _DocumentName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

Octets* ProcessEngine::GetSoftwareList(
    CORBA::Long _ConnectId
    ) {

  Octets* _ret = (Octets*)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "GetSoftwareList",
        1,
        1676422);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::SetUser(
    CORBA::Long _ConnectId,
    const char* _UID,
    const char* _PWD,
    CORBA::Boolean _IsAdmin
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "SetUser",
        1,
        7420);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _UID;
    _ostrm << _PWD;
    _ostrm << _IsAdmin;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::AddBaselineDep(
    CORBA::Long _ConnectId,
    const char* _ProductName,
    CORBA::Long _Version,
    const char* _DepOnProductName,
    CORBA::Long _DepOnVersion
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "AddBaselineDep",
        1,
        842178);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _ProductName;
    _ostrm << _Version;
    _ostrm << _DepOnProductName;
    _ostrm << _DepOnVersion;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelPackageItem(
    CORBA::Long _ConnectId,
    const char* _SoftwareName,
    CORBA::Long _Build,
    const char* _ItemName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelPackageItem",
        1,
        816463);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    _ostrm << _Build;
    _ostrm << _ItemName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

void ProcessEngine::DelWorkset(
    CORBA::Long _ConnectId,
    const char* _Owner,
    const char* _Name
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelWorkset",
        1,
        50730);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _Owner;
    _ostrm << _Name;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

CORBA::Boolean ProcessEngine::IsAmin(
    CORBA::Long _ConnectId,
    const char* _UID,
    const char* _PWD
    ) {

  CORBA::Boolean _ret = (CORBA::Boolean)0;
  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "IsAmin",
        1,
        3344);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _UID;
    _ostrm << _PWD;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
  VISistream& _vistrm = *(CORBA::MarshalInBuffer *)_ibuf;
  _vistrm >> _ret;
  return _ret;
}

void ProcessEngine::DelSoftware(
    CORBA::Long _ConnectId,
    const char* _SoftwareName
    ) {

  CORBA_MarshalInBuffer_var _ibuf;
  CORBA::MarshalOutBuffer_var _obuf;
  
  while( 1 ) { 
    _obuf = ___root->_create_request(
        "DelSoftware",
        1,
        101757);
    VISostream& _ostrm = *(VISostream *)(CORBA::MarshalOutBuffer*)_obuf;
    _ostrm << _ConnectId;
    _ostrm << _SoftwareName;
    
    
    try { 
      _ibuf = ___root->_invoke(_obuf);
    } catch (const CORBA::TRANSIENT& ) {
      continue;
    }
    break;
  }
}

