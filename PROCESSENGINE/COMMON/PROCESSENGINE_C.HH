#ifndef _ProcessEngine_c_hh
#define _ProcessEngine_c_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "corba.h"

#include "vpre.h"

class Octets;
typedef Octets *Octets_ptr;

class Octets {
private:
  CORBA::Octet *_contents;
  CORBA::ULong    _count;
  CORBA::ULong    _num_allocated;
  CORBA::Long     _ref_count;

  CORBA::Boolean  _release_flag;
public:
  
#if defined(MSVCNEWDLL_BUG)
  void *operator new(size_t ts);
  void *operator new(size_t ts, char*, int) {return operator new(ts);}
  void operator delete(void *p);
  
#endif

  static CORBA::Octet *allocbuf(CORBA::ULong _nelems);
  static void freebuf(CORBA::Octet *_data);
  Octets(CORBA::ULong _max=0);
  Octets(CORBA::ULong _max,
      CORBA::ULong _len,
      CORBA::Octet *_data,
      CORBA::Boolean _release=0);
  Octets(const Octets&);
  ~Octets();

  Octets& operator=(const Octets&);
  CORBA::ULong maximum() const { return _num_allocated; }
  void length(CORBA::ULong _len);
  CORBA::ULong length() const { return _count;}
  CORBA::Octet& operator[](CORBA::ULong _index) ;
  const CORBA::Octet& operator[](CORBA::ULong _index) const;

  friend VISostream& operator<<(VISostream&, const Octets&);
  inline friend VISostream& operator<<(VISostream& _strm, const Octets *_obj) {
    if ( _obj == (Octets*)NULL )
      throw CORBA::BAD_PARAM();
    else
      _strm << *_obj;
    return _strm;
  }

  friend VISistream& operator>>(VISistream&, Octets&);
  inline friend VISistream& operator>>(VISistream& _strm, Octets_ptr & _obj) {
    _obj = new Octets;
    _strm >> *_obj;
    return _strm;
  }

  friend Ostream& operator<<(Ostream&, const Octets&);
  inline friend Istream& operator>>(Istream& _strm, Octets& _obj) {
    VISistream _istrm(_strm);
    _istrm >> _obj;
    return _strm;
  }

  inline friend Istream& operator>>(Istream& _strm, Octets_ptr & _obj) {
    VISistream _istrm(_strm);
    _istrm >> _obj;
    return _strm;
  }

  static Octets *_duplicate(Octets* _ptr) {
    if (_ptr) _ptr->_ref_count++;
    return _ptr;
  }

  static void _release(Octets *_ptr) {
    if (_ptr && ( --_ptr->_ref_count == 0) ) delete _ptr;
  }

};

class Octets_out;

class Octets_var {
  friend class Octets_out;
private:
  Octets *_ptr;

public:
  Octets_var() : _ptr((Octets *)NULL) {}
  Octets_var(Octets *_p) :_ptr(_p) {}
  Octets_var(const Octets_var& _var) :
    _ptr(Octets::_duplicate((Octets *)_var)){}
  ~Octets_var() { Octets::_release(_ptr); }

  Octets_var& operator=(Octets *_p) {
    Octets::_release(_ptr);
    _ptr = _p;
    return *this;
  }

  Octets_var& operator=(const Octets_var& _var) {
    Octets::_release(_ptr);
    _ptr = Octets::_duplicate((Octets *)_var);
    return *this;
  }

  Octets *operator->() { return _ptr; }
  CORBA::Octet& operator[](CORBA::ULong _index) {
    return _ptr->operator[](_index);
  }

  const CORBA::Octet& operator[](CORBA::ULong _index) const {
    return _ptr->operator[](_index);
  }

  operator Octets *() const { return _ptr; }
  operator const Octets& () const { return *_ptr; }
  operator Octets& () { return *_ptr; }

  const Octets& in() const { return *_ptr; }
  Octets& inout() { return *_ptr; }
  Octets_ptr & out();
  Octets* _retn() {
    Octets* _tmp_ptr;
    _tmp_ptr = _ptr;
    _ptr = (Octets *)NULL;
    return _tmp_ptr;
  }
  inline friend VISostream& operator<<(
      VISostream& _strm,
      const Octets_var& _var) {
    if ( _var._ptr == (Octets *)NULL )
      throw CORBA::BAD_PARAM();
    else
      _strm << *_var._ptr;
    return _strm;
  }

  inline friend  VISistream& operator>>(
      VISistream& _strm,
      Octets_var& _var) {
    if ( _var._ptr == (Octets *)NULL )
      _var._ptr = new Octets;
    _strm >> *_var._ptr;
    return _strm;
  }

};

class Octets_out {
private:
  Octets_ptr & _ptr;
  static Octets* _nil() { return (Octets*)NULL; }
  void operator=(const Octets_out&);
  void operator=(const Octets_var&);

public:
  Octets_out(const Octets_out& _o) : _ptr(_o._ptr) {}
  Octets_out(Octets_ptr & _p) : _ptr(_p) { 
    _ptr = _nil();
  }
  Octets_out(Octets_var& _v) : _ptr(_v._ptr) {
    Octets::_release(_ptr); _ptr = _nil();
  }
  Octets_out& operator=(Octets* _p) {
    _ptr = _p;
    return *this;
  }
  operator Octets_ptr &() { return _ptr; }
  Octets_ptr & ptr() { return _ptr; }
};


#ifndef _ProcessEngine_var_
#define _ProcessEngine_var_

class ProcessEngine;
typedef ProcessEngine* ProcessEngine_ptr;
typedef ProcessEngine_ptr ProcessEngineRef;

 VISistream& operator>>(VISistream&, ProcessEngine_ptr&);
 VISostream& operator<<(VISostream&, const ProcessEngine_ptr);

class ProcessEngine_out;
class ProcessEngine_var: public CORBA::_var {
  friend class ProcessEngine_out;

private:
  ProcessEngine_ptr _ptr;

public:
  void operator=(const ProcessEngine_var&_v) {
    if ( _ptr ) _release(_ptr);
    if ( _v._ptr )
      _ptr = _duplicate(_v._ptr);
    else
      _ptr = (ProcessEngine_ptr)NULL;
  }

  static ProcessEngine_ptr _duplicate(ProcessEngine_ptr);
  static void _release(ProcessEngine_ptr);

  ProcessEngine_var();
  ProcessEngine_var(ProcessEngine_ptr);
  ProcessEngine_var(const ProcessEngine_var&);
  ~ProcessEngine_var();
  ProcessEngine_var& operator=(ProcessEngine_ptr);
  operator ProcessEngine_ptr() const { return _ptr; }
  ProcessEngine_ptr operator->() const { return _ptr; }
  ProcessEngine_ptr in() const { return _ptr; }
  ProcessEngine_ptr& inout() { return _ptr; }
  ProcessEngine_ptr& out();
  ProcessEngine_ptr _retn() {
    ProcessEngine_ptr _tmp_ptr;
    _tmp_ptr = _ptr;
    _ptr = (ProcessEngine_ptr)NULL;
    return _tmp_ptr;
  }
  friend VISistream& operator>>(VISistream&, ProcessEngine_var&);
  friend VISostream& operator<<(VISostream&, const ProcessEngine_var&);
  friend Istream& operator>>(Istream&, ProcessEngine_var&);
  friend Ostream& operator<<(Ostream&, const ProcessEngine_var&);
};

class ProcessEngine_out {
private:
  ProcessEngine_ptr & _ptr;
  static ProcessEngine* _nil() { return (ProcessEngine*)NULL; }
  void operator=(const ProcessEngine_out&);
  void operator=(const ProcessEngine_var&);

public:
  ProcessEngine_out(const ProcessEngine_out& _o) : _ptr(_o._ptr) {}
  ProcessEngine_out(ProcessEngine_ptr & _p) : _ptr(_p) { 
    _ptr = _nil();
  }
  ProcessEngine_out(ProcessEngine_var& _v) : _ptr(_v._ptr) {
      ProcessEngine_var::_release(_ptr); _ptr = _nil();
  }
  ~ProcessEngine_out() {}
  ProcessEngine_out& operator=(ProcessEngine_ptr _p) {
      _ptr = _p; return *this;
  }
  operator ProcessEngine_ptr& () { return _ptr; }
  ProcessEngine_ptr& ptr() { return _ptr; }
  ProcessEngine_ptr operator->() { return _ptr; }
};


#endif

class ProcessEngine : public virtual CORBA_Object {
private:
  static const CORBA::TypeInfo _class_info;
  ProcessEngine(const ProcessEngine&){ ___root = this; }
  void operator=(const ProcessEngine&){}

protected:
  ProcessEngine_ptr ___root;
  void set_root(ProcessEngine_ptr root) {
    ___root = root;
  }
  
public:
  
  static  const CORBA::TypeInfo *_desc();
  virtual const CORBA::TypeInfo *_type_info() const;
  virtual void *_safe_narrow(const CORBA::TypeInfo& ) const;
  static CORBA::Object *_factory();

  ProcessEngine_ptr _this();
protected:

  ProcessEngine(const char *obj_name = NULL): CORBA_Object(obj_name, 1) { ___root = this; }
public:
  virtual ~ProcessEngine() {}

  static ProcessEngine_ptr _duplicate(ProcessEngine_ptr _obj) {
    if ( _obj ) _obj->_ref();
    return _obj;
  }
  static ProcessEngine_ptr _nil() { return (ProcessEngine_ptr)NULL; }
  static ProcessEngine_ptr _narrow(CORBA::Object *_obj);
  static ProcessEngine_ptr _clone(ProcessEngine_ptr _obj) {
    CORBA::Object_var _obj_var(__clone(_obj));
    
#if defined(_HPCC_BUG)
    return _narrow(_obj_var.operator CORBA::Object_ptr());
    
#else
    return _narrow(_obj_var);
    
#endif
  }

  static ProcessEngine_ptr _bind(
      const char *_object_name = NULL,
      const char *_host_name = NULL,
      const CORBA::BindOptions* _opt = NULL,
      CORBA::ORB_ptr _orb = NULL);

  virtual void AddDocument(
      CORBA::Long _ConnectId,
      CORBA::Long _MasterIndex,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Boolean _AllowVersions
      );

  virtual CORBA::Boolean GetVersioning(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName
      );

  virtual void AddBaseline(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version
      );

  virtual void ChangePassword(
      CORBA::Long _ConnectId,
      const char* _Password
      );

  virtual void SetType(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _StoreName
      );

  virtual void SetWorksetItem(
      CORBA::Long _ConnectId,
      const char* _Owner,
      const char* _Name,
      const char* _TypeName,
      const char* _DocName,
      CORBA::Long _Version
      );

  virtual Octets* GetUserList(
      CORBA::Long _ConnectId
      );

  virtual void DeleteVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version
      );

  virtual void DisConnect(
      CORBA::Long _ConnectId
      );

  virtual CORBA::Long NewInstance(
      );

  virtual void DelUserRole(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _RoleName,
      const char* _UID
      );

  virtual Octets* GetDocumentList(
      CORBA::Long _ConnectId
      );

  virtual Octets* GetUserWorksetList(
      CORBA::Long _ConnectId,
      const char* _Owner
      );

  virtual void LockDocument(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      const char* _UID
      );

  virtual Octets* GetVersionList(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName
      );

  virtual Octets* GetPackageList(
      CORBA::Long _ConnectId
      );

  virtual void DelCycle(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _FromStateName,
      const char* _ToStateName,
      const char* _RoleName
      );

  virtual void DelBaseline(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version
      );

  virtual void SetVersionState(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version,
      const char* _StateName
      );

  virtual void Connect(
      const char* _UID,
      const char* _PWD
      );

  virtual Octets* GetStateList(
      CORBA::Long _ConnectId,
      const char* _TypeName
      );

  virtual Octets* GetTypeList(
      CORBA::Long _ConnectId
      );

  virtual void UnLockDocument(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      const char* _UID
      );

  virtual void AddState(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _StateName,
      CORBA::Boolean _IsFinal
      );

  virtual void AddPackage(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build
      );

  virtual Octets* GetProductPackageList(
      CORBA::Long _ConnectId,
      const char* _SoftwareName
      );

  virtual Octets* GetProductBaselineList(
      CORBA::Long _ConnectId,
      const char* _ProductName
      );

  virtual void AddVersionDep(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version,
      const char* _ProductName,
      CORBA::Long _Build
      );

  virtual void DelBaselineDep(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version
      );

  virtual void UnLockVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version,
      const char* _UID
      );

  virtual Octets* GetPackageItemList(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build
      );

  virtual char* GetTypeStore(
      CORBA::Long _ConnectId,
      const char* _TypeName
      );

  virtual void DelUser(
      CORBA::Long _ConnectId,
      const char* _UID,
      const char* _PWD
      );

  virtual void SetPackageItem(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build,
      const char* _ItemName,
      const Octets& _Info
      );

  virtual Octets* GetPackageDepList(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build
      );

  virtual CORBA::Boolean IsUpdatedVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      const Octets& _Info
      );

  virtual void AddPackageDep(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build,
      const char* _DepOnProductName,
      CORBA::Long _DepOnVersion
      );

  virtual Octets* GetProductList(
      CORBA::Long _ConnectId
      );

  virtual CORBA::Long SetNewVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      const Octets& _Info
      );

  virtual void AddRole(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _RoleName
      );

  virtual void DelPackage(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build
      );

  virtual Octets* GetCycleList(
      CORBA::Long _ConnectId,
      const char* _TypeName
      );

  virtual void DelType(
      CORBA::Long _ConnectId,
      const char* _TypeName
      );

  virtual Octets* GetBaselineList(
      CORBA::Long _ConnectId
      );

  virtual Octets* GetRoleList(
      CORBA::Long _ConnectId,
      const char* _TypeName
      );

  virtual Octets* GetWorksetItemList(
      CORBA::Long _ConnectId,
      const char* _Owner,
      const char* _Name
      );

  virtual void CloseInstance(
      CORBA::Long _ConnectId
      );

  virtual void AddProduct(
      CORBA::Long _ConnectId,
      const char* _ProductName
      );

  virtual Octets* GetBaselineItemList(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version
      );

  virtual void SetBaselineItem(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version,
      const char* _TypeName,
      const char* _DocName,
      CORBA::Long _DocVersion
      );

  virtual void SetUserRole(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _RoleName,
      const char* _UID
      );

  virtual CORBA::Long GetDocumentIndex(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName
      );

  virtual void AddWorkset(
      CORBA::Long _ConnectId,
      const char* _Owner,
      const char* _Name
      );

  virtual void LockVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version,
      const char* _UID
      );

  virtual Octets* GetRoleUserList(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _RoleName
      );

  virtual void DelState(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _StateName
      );

  virtual void DelBaselineItem(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version,
      const char* _TypeName,
      const char* _DocName
      );

  virtual void AddCycle(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _FromStateName,
      const char* _ToStateName,
      const char* _RoleName
      );

  virtual Octets* GetVersionDepList(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version
      );

  virtual void DelWorksetItem(
      CORBA::Long _ConnectId,
      const char* _Owner,
      const char* _Name,
      const char* _TypeName,
      const char* _DocName
      );

  virtual void AddSoftware(
      CORBA::Long _ConnectId,
      const char* _SoftwareName
      );

  virtual Octets* GetVersion(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version
      );

  virtual void DelRole(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _RoleName
      );

  virtual CORBA::Boolean IsConnected(
      CORBA::Long _ConnectId
      );

  virtual Octets* GetWorksetList(
      CORBA::Long _ConnectId
      );

  virtual void DelPackageDep(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build
      );

  virtual void DelVersionDep(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version
      );

  virtual Octets* GetBaselineDepList(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version
      );

  virtual void DelProduct(
      CORBA::Long _ConnectId,
      const char* _ProductName
      );

  virtual char* GetVersionState(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName,
      CORBA::Long _Version
      );

  virtual Octets* GetPossibleStates(
      CORBA::Long _ConnectId,
      const char* _TypeName,
      const char* _DocumentName
      );

  virtual Octets* GetSoftwareList(
      CORBA::Long _ConnectId
      );

  virtual void SetUser(
      CORBA::Long _ConnectId,
      const char* _UID,
      const char* _PWD,
      CORBA::Boolean _IsAdmin
      );

  virtual void AddBaselineDep(
      CORBA::Long _ConnectId,
      const char* _ProductName,
      CORBA::Long _Version,
      const char* _DepOnProductName,
      CORBA::Long _DepOnVersion
      );

  virtual void DelPackageItem(
      CORBA::Long _ConnectId,
      const char* _SoftwareName,
      CORBA::Long _Build,
      const char* _ItemName
      );

  virtual void DelWorkset(
      CORBA::Long _ConnectId,
      const char* _Owner,
      const char* _Name
      );

  virtual CORBA::Boolean IsAmin(
      CORBA::Long _ConnectId,
      const char* _UID,
      const char* _PWD
      );

  virtual void DelSoftware(
      CORBA::Long _ConnectId,
      const char* _SoftwareName
      );

  friend VISistream& operator>>(VISistream& _strm, ProcessEngine_ptr& _obj);
  friend VISostream& operator<<(VISostream& _strm, const ProcessEngine_ptr _obj);
  friend Ostream& operator<<(Ostream& _strm, const ProcessEngine_ptr _obj) {
    _strm << (CORBA::Object_ptr)_obj;
    return _strm;
  }

  friend Istream& operator>>(Istream& _strm, ProcessEngine_ptr& _obj) {
    VISistream _istrm(_strm);
    _istrm >> _obj;
    return _strm;
  }

};


#include "vpost.h"

#endif

