#ifndef _ProcessEngine_s_hh
#define _ProcessEngine_s_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "ProcessEngine_c.hh"


#include "vpre.h"

class  _sk_ProcessEngine : public  ProcessEngine {
protected:

  _sk_ProcessEngine(const char *_obj_name = (const char *)NULL);
  _sk_ProcessEngine(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_ProcessEngine() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual void AddDocument(
      CORBA::Long ConnectId,
      CORBA::Long MasterIndex,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Boolean AllowVersions
      ) = 0;
  virtual CORBA::Boolean GetVersioning(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) = 0;
  virtual void AddBaseline(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) = 0;
  virtual void ChangePassword(
      CORBA::Long ConnectId,
      const char* Password
      ) = 0;
  virtual void SetType(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StoreName
      ) = 0;
  virtual void SetWorksetItem(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name,
      const char* TypeName,
      const char* DocName,
      CORBA::Long Version
      ) = 0;
  virtual Octets* GetUserList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void DeleteVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) = 0;
  virtual void DisConnect(
      CORBA::Long ConnectId
      ) = 0;
  virtual CORBA::Long NewInstance() = 0;
  virtual void DelUserRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName,
      const char* UID
      ) = 0;
  virtual Octets* GetDocumentList(
      CORBA::Long ConnectId
      ) = 0;
  virtual Octets* GetUserWorksetList(
      CORBA::Long ConnectId,
      const char* Owner
      ) = 0;
  virtual void LockDocument(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const char* UID
      ) = 0;
  virtual Octets* GetVersionList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) = 0;
  virtual Octets* GetPackageList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void DelCycle(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* FromStateName,
      const char* ToStateName,
      const char* RoleName
      ) = 0;
  virtual void DelBaseline(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) = 0;
  virtual void SetVersionState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* StateName
      ) = 0;
  virtual void Connect(
      const char* UID,
      const char* PWD
      ) = 0;
  virtual Octets* GetStateList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) = 0;
  virtual Octets* GetTypeList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void UnLockDocument(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const char* UID
      ) = 0;
  virtual void AddState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StateName,
      CORBA::Boolean IsFinal
      ) = 0;
  virtual void AddPackage(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) = 0;
  virtual Octets* GetProductPackageList(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) = 0;
  virtual Octets* GetProductBaselineList(
      CORBA::Long ConnectId,
      const char* ProductName
      ) = 0;
  virtual void AddVersionDep(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* ProductName,
      CORBA::Long Build
      ) = 0;
  virtual void DelBaselineDep(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) = 0;
  virtual void UnLockVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* UID
      ) = 0;
  virtual Octets* GetPackageItemList(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) = 0;
  virtual char* GetTypeStore(
      CORBA::Long ConnectId,
      const char* TypeName
      ) = 0;
  virtual void DelUser(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD
      ) = 0;
  virtual void SetPackageItem(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* ItemName,
      const Octets& Info
      ) = 0;
  virtual Octets* GetPackageDepList(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) = 0;
  virtual CORBA::Boolean IsUpdatedVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const Octets& Info
      ) = 0;
  virtual void AddPackageDep(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* DepOnProductName,
      CORBA::Long DepOnVersion
      ) = 0;
  virtual Octets* GetProductList(
      CORBA::Long ConnectId
      ) = 0;
  virtual CORBA::Long SetNewVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const Octets& Info
      ) = 0;
  virtual void AddRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) = 0;
  virtual void DelPackage(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) = 0;
  virtual Octets* GetCycleList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) = 0;
  virtual void DelType(
      CORBA::Long ConnectId,
      const char* TypeName
      ) = 0;
  virtual Octets* GetBaselineList(
      CORBA::Long ConnectId
      ) = 0;
  virtual Octets* GetRoleList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) = 0;
  virtual Octets* GetWorksetItemList(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) = 0;
  virtual void CloseInstance(
      CORBA::Long ConnectId
      ) = 0;
  virtual void AddProduct(
      CORBA::Long ConnectId,
      const char* ProductName
      ) = 0;
  virtual Octets* GetBaselineItemList(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) = 0;
  virtual void SetBaselineItem(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* TypeName,
      const char* DocName,
      CORBA::Long DocVersion
      ) = 0;
  virtual void SetUserRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName,
      const char* UID
      ) = 0;
  virtual CORBA::Long GetDocumentIndex(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) = 0;
  virtual void AddWorkset(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) = 0;
  virtual void LockVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* UID
      ) = 0;
  virtual Octets* GetRoleUserList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) = 0;
  virtual void DelState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StateName
      ) = 0;
  virtual void DelBaselineItem(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* TypeName,
      const char* DocName
      ) = 0;
  virtual void AddCycle(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* FromStateName,
      const char* ToStateName,
      const char* RoleName
      ) = 0;
  virtual Octets* GetVersionDepList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) = 0;
  virtual void DelWorksetItem(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name,
      const char* TypeName,
      const char* DocName
      ) = 0;
  virtual void AddSoftware(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) = 0;
  virtual Octets* GetVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) = 0;
  virtual void DelRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) = 0;
  virtual CORBA::Boolean IsConnected(
      CORBA::Long ConnectId
      ) = 0;
  virtual Octets* GetWorksetList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void DelPackageDep(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) = 0;
  virtual void DelVersionDep(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) = 0;
  virtual Octets* GetBaselineDepList(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) = 0;
  virtual void DelProduct(
      CORBA::Long ConnectId,
      const char* ProductName
      ) = 0;
  virtual char* GetVersionState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) = 0;
  virtual Octets* GetPossibleStates(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) = 0;
  virtual Octets* GetSoftwareList(
      CORBA::Long ConnectId
      ) = 0;
  virtual void SetUser(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD,
      CORBA::Boolean IsAdmin
      ) = 0;
  virtual void AddBaselineDep(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* DepOnProductName,
      CORBA::Long DepOnVersion
      ) = 0;
  virtual void DelPackageItem(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* ItemName
      ) = 0;
  virtual void DelWorkset(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) = 0;
  virtual CORBA::Boolean IsAmin(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD
      ) = 0;
  virtual void DelSoftware(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) = 0;
  
  // Skeleton Operations implemented automatically

  static void _AddDocument(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetVersioning(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddBaseline(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _ChangePassword(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetType(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetWorksetItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetUserList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DeleteVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DisConnect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _NewInstance(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelUserRole(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetDocumentList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetUserWorksetList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _LockDocument(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetVersionList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetPackageList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelCycle(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelBaseline(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetVersionState(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Connect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetStateList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTypeList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _UnLockDocument(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddState(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddPackage(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetProductPackageList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetProductBaselineList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddVersionDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelBaselineDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _UnLockVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetPackageItemList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTypeStore(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetPackageItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetPackageDepList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _IsUpdatedVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddPackageDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetProductList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetNewVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddRole(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelPackage(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetCycleList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelType(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBaselineList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetRoleList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetWorksetItemList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _CloseInstance(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddProduct(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBaselineItemList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetBaselineItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetUserRole(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetDocumentIndex(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddWorkset(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _LockVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetRoleUserList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelState(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelBaselineItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddCycle(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetVersionDepList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelWorksetItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSoftware(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetVersion(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelRole(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _IsConnected(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetWorksetList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelPackageDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelVersionDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBaselineDepList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelProduct(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetVersionState(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetPossibleStates(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetSoftwareList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddBaselineDep(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelPackageItem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelWorkset(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _IsAmin(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSoftware(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_ProcessEngine : public ProcessEngine {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_ProcessEngine(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_ProcessEngine(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_ProcessEngine() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  void AddDocument(
      CORBA::Long ConnectId,
      CORBA::Long MasterIndex,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Boolean AllowVersions
      ) {
    _ref.AddDocument(
        ConnectId,
        MasterIndex,
        TypeName,
        DocumentName,
        AllowVersions
        );
  }

  CORBA::Boolean GetVersioning(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) {
    return _ref.GetVersioning(
        ConnectId,
        TypeName,
        DocumentName
        );
  }

  void AddBaseline(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) {
    _ref.AddBaseline(
        ConnectId,
        ProductName,
        Version
        );
  }

  void ChangePassword(
      CORBA::Long ConnectId,
      const char* Password
      ) {
    _ref.ChangePassword(
        ConnectId,
        Password
        );
  }

  void SetType(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StoreName
      ) {
    _ref.SetType(
        ConnectId,
        TypeName,
        StoreName
        );
  }

  void SetWorksetItem(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name,
      const char* TypeName,
      const char* DocName,
      CORBA::Long Version
      ) {
    _ref.SetWorksetItem(
        ConnectId,
        Owner,
        Name,
        TypeName,
        DocName,
        Version
        );
  }

  Octets* GetUserList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetUserList(
        ConnectId
        );
  }

  void DeleteVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) {
    _ref.DeleteVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Version
        );
  }

  void DisConnect(
      CORBA::Long ConnectId
      ) {
    _ref.DisConnect(
        ConnectId
        );
  }

  CORBA::Long NewInstance(
      ) {
    return _ref.NewInstance(
        );
  }

  void DelUserRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName,
      const char* UID
      ) {
    _ref.DelUserRole(
        ConnectId,
        TypeName,
        RoleName,
        UID
        );
  }

  Octets* GetDocumentList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetDocumentList(
        ConnectId
        );
  }

  Octets* GetUserWorksetList(
      CORBA::Long ConnectId,
      const char* Owner
      ) {
    return _ref.GetUserWorksetList(
        ConnectId,
        Owner
        );
  }

  void LockDocument(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const char* UID
      ) {
    _ref.LockDocument(
        ConnectId,
        TypeName,
        DocumentName,
        UID
        );
  }

  Octets* GetVersionList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) {
    return _ref.GetVersionList(
        ConnectId,
        TypeName,
        DocumentName
        );
  }

  Octets* GetPackageList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetPackageList(
        ConnectId
        );
  }

  void DelCycle(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* FromStateName,
      const char* ToStateName,
      const char* RoleName
      ) {
    _ref.DelCycle(
        ConnectId,
        TypeName,
        FromStateName,
        ToStateName,
        RoleName
        );
  }

  void DelBaseline(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) {
    _ref.DelBaseline(
        ConnectId,
        ProductName,
        Version
        );
  }

  void SetVersionState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* StateName
      ) {
    _ref.SetVersionState(
        ConnectId,
        TypeName,
        DocumentName,
        Version,
        StateName
        );
  }

  void Connect(
      const char* UID,
      const char* PWD
      ) {
    _ref.Connect(
        UID,
        PWD
        );
  }

  Octets* GetStateList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) {
    return _ref.GetStateList(
        ConnectId,
        TypeName
        );
  }

  Octets* GetTypeList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetTypeList(
        ConnectId
        );
  }

  void UnLockDocument(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const char* UID
      ) {
    _ref.UnLockDocument(
        ConnectId,
        TypeName,
        DocumentName,
        UID
        );
  }

  void AddState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StateName,
      CORBA::Boolean IsFinal
      ) {
    _ref.AddState(
        ConnectId,
        TypeName,
        StateName,
        IsFinal
        );
  }

  void AddPackage(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) {
    _ref.AddPackage(
        ConnectId,
        SoftwareName,
        Build
        );
  }

  Octets* GetProductPackageList(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) {
    return _ref.GetProductPackageList(
        ConnectId,
        SoftwareName
        );
  }

  Octets* GetProductBaselineList(
      CORBA::Long ConnectId,
      const char* ProductName
      ) {
    return _ref.GetProductBaselineList(
        ConnectId,
        ProductName
        );
  }

  void AddVersionDep(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* ProductName,
      CORBA::Long Build
      ) {
    _ref.AddVersionDep(
        ConnectId,
        TypeName,
        DocumentName,
        Version,
        ProductName,
        Build
        );
  }

  void DelBaselineDep(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) {
    _ref.DelBaselineDep(
        ConnectId,
        ProductName,
        Version
        );
  }

  void UnLockVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* UID
      ) {
    _ref.UnLockVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Version,
        UID
        );
  }

  Octets* GetPackageItemList(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) {
    return _ref.GetPackageItemList(
        ConnectId,
        SoftwareName,
        Build
        );
  }

  char* GetTypeStore(
      CORBA::Long ConnectId,
      const char* TypeName
      ) {
    return _ref.GetTypeStore(
        ConnectId,
        TypeName
        );
  }

  void DelUser(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD
      ) {
    _ref.DelUser(
        ConnectId,
        UID,
        PWD
        );
  }

  void SetPackageItem(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* ItemName,
      const Octets& Info
      ) {
    _ref.SetPackageItem(
        ConnectId,
        SoftwareName,
        Build,
        ItemName,
        Info
        );
  }

  Octets* GetPackageDepList(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) {
    return _ref.GetPackageDepList(
        ConnectId,
        SoftwareName,
        Build
        );
  }

  CORBA::Boolean IsUpdatedVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const Octets& Info
      ) {
    return _ref.IsUpdatedVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Info
        );
  }

  void AddPackageDep(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* DepOnProductName,
      CORBA::Long DepOnVersion
      ) {
    _ref.AddPackageDep(
        ConnectId,
        SoftwareName,
        Build,
        DepOnProductName,
        DepOnVersion
        );
  }

  Octets* GetProductList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetProductList(
        ConnectId
        );
  }

  CORBA::Long SetNewVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      const Octets& Info
      ) {
    return _ref.SetNewVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Info
        );
  }

  void AddRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) {
    _ref.AddRole(
        ConnectId,
        TypeName,
        RoleName
        );
  }

  void DelPackage(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) {
    _ref.DelPackage(
        ConnectId,
        SoftwareName,
        Build
        );
  }

  Octets* GetCycleList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) {
    return _ref.GetCycleList(
        ConnectId,
        TypeName
        );
  }

  void DelType(
      CORBA::Long ConnectId,
      const char* TypeName
      ) {
    _ref.DelType(
        ConnectId,
        TypeName
        );
  }

  Octets* GetBaselineList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetBaselineList(
        ConnectId
        );
  }

  Octets* GetRoleList(
      CORBA::Long ConnectId,
      const char* TypeName
      ) {
    return _ref.GetRoleList(
        ConnectId,
        TypeName
        );
  }

  Octets* GetWorksetItemList(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) {
    return _ref.GetWorksetItemList(
        ConnectId,
        Owner,
        Name
        );
  }

  void CloseInstance(
      CORBA::Long ConnectId
      ) {
    _ref.CloseInstance(
        ConnectId
        );
  }

  void AddProduct(
      CORBA::Long ConnectId,
      const char* ProductName
      ) {
    _ref.AddProduct(
        ConnectId,
        ProductName
        );
  }

  Octets* GetBaselineItemList(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) {
    return _ref.GetBaselineItemList(
        ConnectId,
        ProductName,
        Version
        );
  }

  void SetBaselineItem(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* TypeName,
      const char* DocName,
      CORBA::Long DocVersion
      ) {
    _ref.SetBaselineItem(
        ConnectId,
        ProductName,
        Version,
        TypeName,
        DocName,
        DocVersion
        );
  }

  void SetUserRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName,
      const char* UID
      ) {
    _ref.SetUserRole(
        ConnectId,
        TypeName,
        RoleName,
        UID
        );
  }

  CORBA::Long GetDocumentIndex(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) {
    return _ref.GetDocumentIndex(
        ConnectId,
        TypeName,
        DocumentName
        );
  }

  void AddWorkset(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) {
    _ref.AddWorkset(
        ConnectId,
        Owner,
        Name
        );
  }

  void LockVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version,
      const char* UID
      ) {
    _ref.LockVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Version,
        UID
        );
  }

  Octets* GetRoleUserList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) {
    return _ref.GetRoleUserList(
        ConnectId,
        TypeName,
        RoleName
        );
  }

  void DelState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* StateName
      ) {
    _ref.DelState(
        ConnectId,
        TypeName,
        StateName
        );
  }

  void DelBaselineItem(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* TypeName,
      const char* DocName
      ) {
    _ref.DelBaselineItem(
        ConnectId,
        ProductName,
        Version,
        TypeName,
        DocName
        );
  }

  void AddCycle(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* FromStateName,
      const char* ToStateName,
      const char* RoleName
      ) {
    _ref.AddCycle(
        ConnectId,
        TypeName,
        FromStateName,
        ToStateName,
        RoleName
        );
  }

  Octets* GetVersionDepList(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) {
    return _ref.GetVersionDepList(
        ConnectId,
        TypeName,
        DocumentName,
        Version
        );
  }

  void DelWorksetItem(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name,
      const char* TypeName,
      const char* DocName
      ) {
    _ref.DelWorksetItem(
        ConnectId,
        Owner,
        Name,
        TypeName,
        DocName
        );
  }

  void AddSoftware(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) {
    _ref.AddSoftware(
        ConnectId,
        SoftwareName
        );
  }

  Octets* GetVersion(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) {
    return _ref.GetVersion(
        ConnectId,
        TypeName,
        DocumentName,
        Version
        );
  }

  void DelRole(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* RoleName
      ) {
    _ref.DelRole(
        ConnectId,
        TypeName,
        RoleName
        );
  }

  CORBA::Boolean IsConnected(
      CORBA::Long ConnectId
      ) {
    return _ref.IsConnected(
        ConnectId
        );
  }

  Octets* GetWorksetList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetWorksetList(
        ConnectId
        );
  }

  void DelPackageDep(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build
      ) {
    _ref.DelPackageDep(
        ConnectId,
        SoftwareName,
        Build
        );
  }

  void DelVersionDep(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) {
    _ref.DelVersionDep(
        ConnectId,
        TypeName,
        DocumentName,
        Version
        );
  }

  Octets* GetBaselineDepList(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version
      ) {
    return _ref.GetBaselineDepList(
        ConnectId,
        ProductName,
        Version
        );
  }

  void DelProduct(
      CORBA::Long ConnectId,
      const char* ProductName
      ) {
    _ref.DelProduct(
        ConnectId,
        ProductName
        );
  }

  char* GetVersionState(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName,
      CORBA::Long Version
      ) {
    return _ref.GetVersionState(
        ConnectId,
        TypeName,
        DocumentName,
        Version
        );
  }

  Octets* GetPossibleStates(
      CORBA::Long ConnectId,
      const char* TypeName,
      const char* DocumentName
      ) {
    return _ref.GetPossibleStates(
        ConnectId,
        TypeName,
        DocumentName
        );
  }

  Octets* GetSoftwareList(
      CORBA::Long ConnectId
      ) {
    return _ref.GetSoftwareList(
        ConnectId
        );
  }

  void SetUser(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD,
      CORBA::Boolean IsAdmin
      ) {
    _ref.SetUser(
        ConnectId,
        UID,
        PWD,
        IsAdmin
        );
  }

  void AddBaselineDep(
      CORBA::Long ConnectId,
      const char* ProductName,
      CORBA::Long Version,
      const char* DepOnProductName,
      CORBA::Long DepOnVersion
      ) {
    _ref.AddBaselineDep(
        ConnectId,
        ProductName,
        Version,
        DepOnProductName,
        DepOnVersion
        );
  }

  void DelPackageItem(
      CORBA::Long ConnectId,
      const char* SoftwareName,
      CORBA::Long Build,
      const char* ItemName
      ) {
    _ref.DelPackageItem(
        ConnectId,
        SoftwareName,
        Build,
        ItemName
        );
  }

  void DelWorkset(
      CORBA::Long ConnectId,
      const char* Owner,
      const char* Name
      ) {
    _ref.DelWorkset(
        ConnectId,
        Owner,
        Name
        );
  }

  CORBA::Boolean IsAmin(
      CORBA::Long ConnectId,
      const char* UID,
      const char* PWD
      ) {
    return _ref.IsAmin(
        ConnectId,
        UID,
        PWD
        );
  }

  void DelSoftware(
      CORBA::Long ConnectId,
      const char* SoftwareName
      ) {
    _ref.DelSoftware(
        ConnectId,
        SoftwareName
        );
  }

};


#include "vpost.h"

#endif

