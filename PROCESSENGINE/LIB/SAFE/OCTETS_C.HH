#ifndef _Octets_c_hh
#define _Octets_c_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "corba.h"

#include "vpre.h"

#ifndef OCTETS_H
#define OCTETS_H
class Octets;
typedef Octets *Octets_ptr;

class Octets {
private:
  CORBA::Octet *_contents;
  CORBA::ULong    _count;
  CORBA::ULong    _num_allocated;
  CORBA::Long     _ref_count;

  CORBA::Boolean  _release_flag;
public:

#if defined(MSVCNEWDLL_BUG)
  void *operator new(size_t ts);
  void *operator new(size_t ts, char*, int) {return operator new(ts);}
  void operator delete(void *p);

#endif

  static CORBA::Octet *allocbuf(CORBA::ULong _nelems);
  static void freebuf(CORBA::Octet *_data);
  Octets(CORBA::ULong _max=0);
  Octets(CORBA::ULong _max,
      CORBA::ULong _len,
      CORBA::Octet *_data,
      CORBA::Boolean _release=0);
  Octets(const Octets&);
  ~Octets();

  Octets& operator=(const Octets&);
  CORBA::ULong maximum() const { return _num_allocated; }
  void length(CORBA::ULong _len);
  CORBA::ULong length() const { return _count;}
  CORBA::Octet& operator[](CORBA::ULong _index) ;
  const CORBA::Octet& operator[](CORBA::ULong _index) const;

  friend VISostream& operator<<(VISostream&, const Octets&);
  inline friend VISostream& operator<<(VISostream& _strm, const Octets *_obj) {
    if ( _obj == (Octets*)NULL )
      throw CORBA::BAD_PARAM();
    else
      _strm << *_obj;
    return _strm;
  }

  friend VISistream& operator>>(VISistream&, Octets&);
  inline friend VISistream& operator>>(VISistream& _strm, Octets_ptr & _obj) {
    _obj = new Octets;
    _strm >> *_obj;
    return _strm;
  }

  friend Ostream& operator<<(Ostream&, const Octets&);
  inline friend Istream& operator>>(Istream& _strm, Octets& _obj) {
    VISistream _istrm(_strm);
    _istrm >> _obj;
    return _strm;
  }

  inline friend Istream& operator>>(Istream& _strm, Octets_ptr & _obj) {
    VISistream _istrm(_strm);
    _istrm >> _obj;
    return _strm;
  }

  static Octets *_duplicate(Octets* _ptr) {
    if (_ptr) _ptr->_ref_count++;
    return _ptr;
  }

  static void _release(Octets *_ptr) {
    if (_ptr && ( --_ptr->_ref_count == 0) ) delete _ptr;
  }

};

class Octets_out;

class Octets_var {
  friend class Octets_out;
private:
  Octets *_ptr;

public:
  Octets_var() : _ptr((Octets *)NULL) {}
  Octets_var(Octets *_p) :_ptr(_p) {}
  Octets_var(const Octets_var& _var) :
    _ptr(Octets::_duplicate((Octets *)_var)){}
  ~Octets_var() { Octets::_release(_ptr); }

  Octets_var& operator=(Octets *_p) {
    Octets::_release(_ptr);
    _ptr = _p;
    return *this;
  }

  Octets_var& operator=(const Octets_var& _var) {
    Octets::_release(_ptr);
    _ptr = Octets::_duplicate((Octets *)_var);
    return *this;
  }

  Octets *operator->() { return _ptr; }
  CORBA::Octet& operator[](CORBA::ULong _index) {
    return _ptr->operator[](_index);
  }

  const CORBA::Octet& operator[](CORBA::ULong _index) const {
    return _ptr->operator[](_index);
  }

  operator Octets *() const { return _ptr; }
  operator const Octets& () const { return *_ptr; }
  operator Octets& () { return *_ptr; }

  const Octets& in() const { return *_ptr; }
  Octets& inout() { return *_ptr; }
  Octets_ptr & out();
  Octets* _retn() {
    Octets* _tmp_ptr;
    _tmp_ptr = _ptr;
    _ptr = (Octets *)NULL;
    return _tmp_ptr;
  }
  inline friend VISostream& operator<<(
      VISostream& _strm,
      const Octets_var& _var) {
    if ( _var._ptr == (Octets *)NULL )
      throw CORBA::BAD_PARAM();
    else
      _strm << *_var._ptr;
    return _strm;
  }

  inline friend  VISistream& operator>>(
      VISistream& _strm,
      Octets_var& _var) {
    if ( _var._ptr == (Octets *)NULL )
      _var._ptr = new Octets;
    _strm >> *_var._ptr;
    return _strm;
  }

};

class Octets_out {
private:
  Octets_ptr & _ptr;
  static Octets* _nil() { return (Octets*)NULL; }
  void operator=(const Octets_out&);
  void operator=(const Octets_var&);

public:
  Octets_out(const Octets_out& _o) : _ptr(_o._ptr) {}
  Octets_out(Octets_ptr & _p) : _ptr(_p) { 
    _ptr = _nil();
  }
  Octets_out(Octets_var& _v) : _ptr(_v._ptr) {
    Octets::_release(_ptr); _ptr = _nil();
  }
  Octets_out& operator=(Octets* _p) {
    _ptr = _p;
    return *this;
  }
  operator Octets_ptr &() { return _ptr; }
  Octets_ptr & ptr() { return _ptr; }
};
#endif

#include "vpost.h"

#endif

