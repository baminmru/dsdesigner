#ifndef _admin_s_hh
#define _admin_s_hh

/**
 **************************************************************************
 *                                                                        *
 *                        -- DO NOT MODIFY --                             *
 *  This file is automatically generated by the VisiBroker IDL compiler.  *
 *  Generated code conforms to OMG's IDL-to-C++ 1.1 mapping as specified  *
 *  in OMG Document Number: 96-01-13                                      *
 *                                                                        *
 *  VisiBroker is copyrighted by Visigenic Software, Inc.                 *
 **************************************************************************
 */

#include "admin_c.hh"


#include "vpre.h"

class  _sk_Cartrige : public  Cartrige {
protected:

  _sk_Cartrige(const char *_obj_name = (const char *)NULL);
  _sk_Cartrige(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_Cartrige() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual char* Name() = 0;
  virtual void Name(const char* _val) = 0;
  virtual CORBA::Long OpenCursor(
      const char* Query,
      const seqParams& Parameters
      ) = 0;
  virtual CORBA::Boolean CreateDataBaseObject(
      const seqOctets& ObjDef
      ) = 0;
  virtual RowSet* GetRowSet(
      const char* Query,
      const seqParams& Parameters
      ) = 0;
  virtual void Disconnect() = 0;
  virtual CORBA::Boolean Connect(
      const seqParams& InitValues
      ) = 0;
  virtual CORBA::Boolean Connected() = 0;
  virtual seqSetRow* GetCursorRow(
      CORBA::Long Cursor
      ) = 0;
  virtual seqCartrigeParams* Parameters() = 0;
  virtual CORBA::Boolean NoMoreRows(
      CORBA::Long Cursor
      ) = 0;
  virtual void CloseCursor(
      CORBA::Long Cursor
      ) = 0;
  virtual seqSetHeader* GetCursorHeared(
      CORBA::Long Cursor
      ) = 0;
  virtual void Exec(
      const char* Query,
      const seqParams& Parameters
      ) = 0;
  
  // Skeleton Operations implemented automatically

  static void _get_Name(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _set_Name(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _OpenCursor(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _CreateDataBaseObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetRowSet(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Disconnect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Connect(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _get_Connected(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetCursorRow(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _get_Parameters(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _NoMoreRows(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _CloseCursor(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetCursorHeared(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Exec(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_Cartrige : public Cartrige {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_Cartrige(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_Cartrige(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_Cartrige() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  char* Name() { return _ref.Name(); }
  void Name(const char* _val) { _ref.Name(_val); }

  CORBA::Long OpenCursor(
      const char* Query,
      const seqParams& Parameters
      ) {
    return _ref.OpenCursor(
        Query,
        Parameters
        );
  }

  CORBA::Boolean CreateDataBaseObject(
      const seqOctets& ObjDef
      ) {
    return _ref.CreateDataBaseObject(
        ObjDef
        );
  }

  RowSet* GetRowSet(
      const char* Query,
      const seqParams& Parameters
      ) {
    return _ref.GetRowSet(
        Query,
        Parameters
        );
  }

  void Disconnect(
      ) {
    _ref.Disconnect(
        );
  }

  CORBA::Boolean Connect(
      const seqParams& InitValues
      ) {
    return _ref.Connect(
        InitValues
        );
  }

  CORBA::Boolean Connected() { return _ref.Connected(); }
  seqSetRow* GetCursorRow(
      CORBA::Long Cursor
      ) {
    return _ref.GetCursorRow(
        Cursor
        );
  }

  seqCartrigeParams* Parameters() { return _ref.Parameters(); }
  CORBA::Boolean NoMoreRows(
      CORBA::Long Cursor
      ) {
    return _ref.NoMoreRows(
        Cursor
        );
  }

  void CloseCursor(
      CORBA::Long Cursor
      ) {
    _ref.CloseCursor(
        Cursor
        );
  }

  seqSetHeader* GetCursorHeared(
      CORBA::Long Cursor
      ) {
    return _ref.GetCursorHeared(
        Cursor
        );
  }

  void Exec(
      const char* Query,
      const seqParams& Parameters
      ) {
    _ref.Exec(
        Query,
        Parameters
        );
  }

};

class  _sk_AppServer : public  AppServer {
protected:

  _sk_AppServer(const char *_obj_name = (const char *)NULL);
  _sk_AppServer(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_AppServer() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual sList* GetSystemDomains(
      const char* SystemName
      ) = 0;
  virtual void Logoff() = 0;
  virtual char* CurrentSystem() = 0;
  virtual seqOctets* GetClientSideObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) = 0;
  virtual Cartrige_ptr GetDomainCartrige(
      const char* Domain
      ) = 0;
  virtual CORBA::Boolean Logon(
      const char* Name,
      const char* Pass
      ) = 0;
  virtual void ChooseBuild(
      const char* SystemName,
      const char* BuildName
      ) = 0;
  virtual seqOctets* GetObjectDef(
      const char* ObjBaseType,
      const char* ObjectName
      ) = 0;
  virtual CORBA::Boolean Connected() = 0;
  virtual seqTwiceStrings* GetBuids() = 0;
  virtual void ChangePassword(
      const char* NewPassword
      ) = 0;
  virtual seqOctets* GetTask(
      const char* Task
      ) = 0;
  virtual char* CurrentBuild() = 0;
  
  // Skeleton Operations implemented automatically

  static void _GetSystemDomains(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Logoff(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _get_CurrentSystem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetClientSideObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetDomainCartrige(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _Logon(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _ChooseBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObjectDef(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _get_Connected(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBuids(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _ChangePassword(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTask(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _get_CurrentBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_AppServer : public AppServer {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_AppServer(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_AppServer(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_AppServer() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  sList* GetSystemDomains(
      const char* SystemName
      ) {
    return _ref.GetSystemDomains(
        SystemName
        );
  }

  void Logoff(
      ) {
    _ref.Logoff(
        );
  }

  char* CurrentSystem() { return _ref.CurrentSystem(); }
  seqOctets* GetClientSideObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) {
    return _ref.GetClientSideObject(
        PlatformName,
        ObjBaseType,
        ObjSubType
        );
  }

  Cartrige_ptr GetDomainCartrige(
      const char* Domain
      ) {
    return _ref.GetDomainCartrige(
        Domain
        );
  }

  CORBA::Boolean Logon(
      const char* Name,
      const char* Pass
      ) {
    return _ref.Logon(
        Name,
        Pass
        );
  }

  void ChooseBuild(
      const char* SystemName,
      const char* BuildName
      ) {
    _ref.ChooseBuild(
        SystemName,
        BuildName
        );
  }

  seqOctets* GetObjectDef(
      const char* ObjBaseType,
      const char* ObjectName
      ) {
    return _ref.GetObjectDef(
        ObjBaseType,
        ObjectName
        );
  }

  CORBA::Boolean Connected() { return _ref.Connected(); }
  seqTwiceStrings* GetBuids(
      ) {
    return _ref.GetBuids(
        );
  }

  void ChangePassword(
      const char* NewPassword
      ) {
    _ref.ChangePassword(
        NewPassword
        );
  }

  seqOctets* GetTask(
      const char* Task
      ) {
    return _ref.GetTask(
        Task
        );
  }

  char* CurrentBuild() { return _ref.CurrentBuild(); }
};

class  _sk_AppServerStorageManager : public  AppServerStorageManager {
protected:

  _sk_AppServerStorageManager(const char *_obj_name = (const char *)NULL);
  _sk_AppServerStorageManager(
      const char *_service_name,
      const CORBA::ReferenceData& _data);
  virtual ~_sk_AppServerStorageManager() {}

public:
  static const CORBA::TypeInfo _skel_info;
  
  // No op function to force base skeletons to be linked in
  static void ___noop();
  // The following operations need to be implemented

  virtual sList* GetSystemDomains(
      const char* SystemName
      ) = 0;
  virtual void Logoff() = 0;
  virtual sList* GetPlatforms() = 0;
  virtual CORBA::Boolean DelGroup(
      const char* GroupName
      ) = 0;
  virtual char* CurrentSystem() = 0;
  virtual seqOctets* GetClientSideObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) = 0;
  virtual Cartrige_ptr GetDomainCartrige(
      const char* Domain
      ) = 0;
  virtual CORBA::Boolean AddGroup(
      const char* GroupName
      ) = 0;
  virtual CORBA::Boolean DelSystemTask(
      const char* SystemName,
      const char* TaskName
      ) = 0;
  virtual CORBA::Boolean AddSystem(
      const char* SystemName
      ) = 0;
  virtual CORBA::Boolean GetBuildRight(
      BuildRight& Right
      ) = 0;
  virtual CORBA::Boolean Logon(
      const char* Name,
      const char* Pass
      ) = 0;
  virtual CORBA::Boolean AddSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType
      ) = 0;
  virtual void ChooseBuild(
      const char* SystemName,
      const char* BuildName
      ) = 0;
  virtual sList* GetGroupUsers(
      const char* GroupName
      ) = 0;
  virtual CORBA::Boolean DelSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName
      ) = 0;
  virtual CORBA::Boolean AddSystemBuild(
      const char* SystemName,
      const char* BuildName
      ) = 0;
  virtual CORBA::Boolean DelUserFromGroup(
      const char* GroupName,
      const char* UserName
      ) = 0;
  virtual CORBA::Boolean DelSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType
      ) = 0;
  virtual CORBA::Boolean DelSystemBuild(
      const char* SystemName,
      const char* BuildName
      ) = 0;
  virtual sList* GetGroups() = 0;
  virtual seqOctets* GetObjectDef(
      const char* ObjBaseType,
      const char* ObjectName
      ) = 0;
  virtual CORBA::Boolean AddUserToGroup(
      const char* GroupName,
      const char* UserName
      ) = 0;
  virtual CORBA::Boolean SetupSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType,
      const char* ObjectSubType,
      const seqOctets& Octets
      ) = 0;
  virtual CORBA::Boolean Connected() = 0;
  virtual sList* GetBaseTypeList() = 0;
  virtual CORBA::Boolean AddClientObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType,
      const seqOctets& Octets
      ) = 0;
  virtual CORBA::Boolean AddPlatform(
      const char* Name
      ) = 0;
  virtual CORBA::Boolean SetupSystemTask(
      const char* SystemName,
      const char* TaskName,
      const seqOctets& Octets
      ) = 0;
  virtual CORBA::Boolean GetTaskRight(
      TaskRight& Right
      ) = 0;
  virtual seqTwiceStrings* GetBuids() = 0;
  virtual CORBA::Boolean GetObjectRight(
      ObjectRight& Right
      ) = 0;
  virtual CORBA::Boolean DelSystem(
      const char* SystemName
      ) = 0;
  virtual CORBA::Boolean DelUser(
      const char* UserName
      ) = 0;
  virtual CORBA::Boolean DelClientObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) = 0;
  virtual CORBA::Boolean SetObjectRight(
      const ObjectRight& Right
      ) = 0;
  virtual CORBA::Boolean AddSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName,
      const char* CartrigeName
      ) = 0;
  virtual void ChangePassword(
      const char* NewPassword
      ) = 0;
  virtual seqOctets* GetTask(
      const char* Task
      ) = 0;
  virtual CORBA::Boolean SetBuildRight(
      const BuildRight& Right
      ) = 0;
  virtual CORBA::Boolean AddSystemTask(
      const char* SystemName,
      const char* TaskName
      ) = 0;
  virtual CORBA::Boolean SetupSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName,
      const seqParams& SetupValues
      ) = 0;
  virtual sList* GetUsers() = 0;
  virtual CORBA::Boolean SetTaskRight(
      const TaskRight& Right
      ) = 0;
  virtual char* CurrentBuild() = 0;
  virtual CORBA::Boolean AddUser(
      const char* UserName,
      const char* Password,
      CORBA::Boolean IsAdmin
      ) = 0;
  
  // Skeleton Operations implemented automatically

  static void _GetPlatforms(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelGroup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddGroup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystemTask(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBuildRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystemObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetGroupUsers(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystemBuildDomain(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystemBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelUserFromGroup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystemObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystemBuild(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetGroups(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddUserToGroup(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetupSystemObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetBaseTypeList(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddClientObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddPlatform(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetupSystemTask(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetTaskRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetObjectRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelSystem(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _DelClientObject(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetObjectRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystemBuildDomain(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetBuildRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddSystemTask(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetupSystemBuildDomain(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _GetUsers(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _SetTaskRight(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

  static void _AddUser(
      void *_obj,
      CORBA::MarshalInBuffer &_istrm,
      CORBA::Principal_ptr _principal,
      const char *_oper,
      void *_priv_data);

};

template <class T>
class _tie_AppServerStorageManager : public AppServerStorageManager {
private:
  CORBA::Boolean _rel_flag;
  T& _ref;

public:
  _tie_AppServerStorageManager(
      T& _t,
      const char *_obj_name=(char*)NULL,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _object_name(_obj_name);
  }

  _tie_AppServerStorageManager(
      T& _t,
      const char *_serv_name,
      const CORBA::ReferenceData& _id,
      CORBA::Boolean _r_f=0)
    :_ref(_t) {
    _rel_flag = _r_f;
    _service(_serv_name, _id);
  }

  ~_tie_AppServerStorageManager() { if (_rel_flag) delete &_ref; }

  CORBA::Boolean rel_flag() { return _rel_flag; }
  void rel_flag(CORBA::Boolean _r_f) { _rel_flag = _r_f; }

  
  sList* GetSystemDomains(
      const char* SystemName
      ) {
    return _ref.GetSystemDomains(
        SystemName
        );
  }

  void Logoff(
      ) {
    _ref.Logoff(
        );
  }

  sList* GetPlatforms(
      ) {
    return _ref.GetPlatforms(
        );
  }

  CORBA::Boolean DelGroup(
      const char* GroupName
      ) {
    return _ref.DelGroup(
        GroupName
        );
  }

  char* CurrentSystem() { return _ref.CurrentSystem(); }
  seqOctets* GetClientSideObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) {
    return _ref.GetClientSideObject(
        PlatformName,
        ObjBaseType,
        ObjSubType
        );
  }

  Cartrige_ptr GetDomainCartrige(
      const char* Domain
      ) {
    return _ref.GetDomainCartrige(
        Domain
        );
  }

  CORBA::Boolean AddGroup(
      const char* GroupName
      ) {
    return _ref.AddGroup(
        GroupName
        );
  }

  CORBA::Boolean DelSystemTask(
      const char* SystemName,
      const char* TaskName
      ) {
    return _ref.DelSystemTask(
        SystemName,
        TaskName
        );
  }

  CORBA::Boolean AddSystem(
      const char* SystemName
      ) {
    return _ref.AddSystem(
        SystemName
        );
  }

  CORBA::Boolean GetBuildRight(
      BuildRight& Right
      ) {
    return _ref.GetBuildRight(
        Right
        );
  }

  CORBA::Boolean Logon(
      const char* Name,
      const char* Pass
      ) {
    return _ref.Logon(
        Name,
        Pass
        );
  }

  CORBA::Boolean AddSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType
      ) {
    return _ref.AddSystemObject(
        SystemName,
        ObjectName,
        ObjectBaseType
        );
  }

  void ChooseBuild(
      const char* SystemName,
      const char* BuildName
      ) {
    _ref.ChooseBuild(
        SystemName,
        BuildName
        );
  }

  sList* GetGroupUsers(
      const char* GroupName
      ) {
    return _ref.GetGroupUsers(
        GroupName
        );
  }

  CORBA::Boolean DelSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName
      ) {
    return _ref.DelSystemBuildDomain(
        SystemName,
        BuildName,
        DomainName
        );
  }

  CORBA::Boolean AddSystemBuild(
      const char* SystemName,
      const char* BuildName
      ) {
    return _ref.AddSystemBuild(
        SystemName,
        BuildName
        );
  }

  CORBA::Boolean DelUserFromGroup(
      const char* GroupName,
      const char* UserName
      ) {
    return _ref.DelUserFromGroup(
        GroupName,
        UserName
        );
  }

  CORBA::Boolean DelSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType
      ) {
    return _ref.DelSystemObject(
        SystemName,
        ObjectName,
        ObjectBaseType
        );
  }

  CORBA::Boolean DelSystemBuild(
      const char* SystemName,
      const char* BuildName
      ) {
    return _ref.DelSystemBuild(
        SystemName,
        BuildName
        );
  }

  sList* GetGroups(
      ) {
    return _ref.GetGroups(
        );
  }

  seqOctets* GetObjectDef(
      const char* ObjBaseType,
      const char* ObjectName
      ) {
    return _ref.GetObjectDef(
        ObjBaseType,
        ObjectName
        );
  }

  CORBA::Boolean AddUserToGroup(
      const char* GroupName,
      const char* UserName
      ) {
    return _ref.AddUserToGroup(
        GroupName,
        UserName
        );
  }

  CORBA::Boolean SetupSystemObject(
      const char* SystemName,
      const char* ObjectName,
      const char* ObjectBaseType,
      const char* ObjectSubType,
      const seqOctets& Octets
      ) {
    return _ref.SetupSystemObject(
        SystemName,
        ObjectName,
        ObjectBaseType,
        ObjectSubType,
        Octets
        );
  }

  CORBA::Boolean Connected() { return _ref.Connected(); }
  sList* GetBaseTypeList(
      ) {
    return _ref.GetBaseTypeList(
        );
  }

  CORBA::Boolean AddClientObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType,
      const seqOctets& Octets
      ) {
    return _ref.AddClientObject(
        PlatformName,
        ObjBaseType,
        ObjSubType,
        Octets
        );
  }

  CORBA::Boolean AddPlatform(
      const char* Name
      ) {
    return _ref.AddPlatform(
        Name
        );
  }

  CORBA::Boolean SetupSystemTask(
      const char* SystemName,
      const char* TaskName,
      const seqOctets& Octets
      ) {
    return _ref.SetupSystemTask(
        SystemName,
        TaskName,
        Octets
        );
  }

  CORBA::Boolean GetTaskRight(
      TaskRight& Right
      ) {
    return _ref.GetTaskRight(
        Right
        );
  }

  seqTwiceStrings* GetBuids(
      ) {
    return _ref.GetBuids(
        );
  }

  CORBA::Boolean GetObjectRight(
      ObjectRight& Right
      ) {
    return _ref.GetObjectRight(
        Right
        );
  }

  CORBA::Boolean DelSystem(
      const char* SystemName
      ) {
    return _ref.DelSystem(
        SystemName
        );
  }

  CORBA::Boolean DelUser(
      const char* UserName
      ) {
    return _ref.DelUser(
        UserName
        );
  }

  CORBA::Boolean DelClientObject(
      const char* PlatformName,
      const char* ObjBaseType,
      const char* ObjSubType
      ) {
    return _ref.DelClientObject(
        PlatformName,
        ObjBaseType,
        ObjSubType
        );
  }

  CORBA::Boolean SetObjectRight(
      const ObjectRight& Right
      ) {
    return _ref.SetObjectRight(
        Right
        );
  }

  CORBA::Boolean AddSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName,
      const char* CartrigeName
      ) {
    return _ref.AddSystemBuildDomain(
        SystemName,
        BuildName,
        DomainName,
        CartrigeName
        );
  }

  void ChangePassword(
      const char* NewPassword
      ) {
    _ref.ChangePassword(
        NewPassword
        );
  }

  seqOctets* GetTask(
      const char* Task
      ) {
    return _ref.GetTask(
        Task
        );
  }

  CORBA::Boolean SetBuildRight(
      const BuildRight& Right
      ) {
    return _ref.SetBuildRight(
        Right
        );
  }

  CORBA::Boolean AddSystemTask(
      const char* SystemName,
      const char* TaskName
      ) {
    return _ref.AddSystemTask(
        SystemName,
        TaskName
        );
  }

  CORBA::Boolean SetupSystemBuildDomain(
      const char* SystemName,
      const char* BuildName,
      const char* DomainName,
      const seqParams& SetupValues
      ) {
    return _ref.SetupSystemBuildDomain(
        SystemName,
        BuildName,
        DomainName,
        SetupValues
        );
  }

  sList* GetUsers(
      ) {
    return _ref.GetUsers(
        );
  }

  CORBA::Boolean SetTaskRight(
      const TaskRight& Right
      ) {
    return _ref.SetTaskRight(
        Right
        );
  }

  char* CurrentBuild() { return _ref.CurrentBuild(); }
  CORBA::Boolean AddUser(
      const char* UserName,
      const char* Password,
      CORBA::Boolean IsAdmin
      ) {
    return _ref.AddUser(
        UserName,
        Password,
        IsAdmin
        );
  }

};


#include "vpost.h"

#endif

